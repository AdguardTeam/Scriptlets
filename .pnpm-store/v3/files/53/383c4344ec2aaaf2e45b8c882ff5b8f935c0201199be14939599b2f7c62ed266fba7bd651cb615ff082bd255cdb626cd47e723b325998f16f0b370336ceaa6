/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var constants = require('../utils/constants.js');
var typeGuards = require('../utils/type-guards.js');
var baseSerializer = require('./base-serializer.js');
var ruleSerializer = require('./rule-serializer.js');
var filterListCommon = require('../marshalling-utils/filter-list-common.js');
var binaryTypeCommon = require('../marshalling-utils/misc/binary-type-common.js');

/**
 * `FilterListParser` is responsible for parsing a whole adblock filter list (list of rules).
 * It is a wrapper around `RuleParser` which parses each line separately.
 */
class FilterListSerializer extends baseSerializer.BaseSerializer {
    /**
     * Serializes a filter list node to binary format.
     *
     * @param node Node to serialize.
     * @param buffer ByteBuffer for writing binary data.
     */
    // TODO: add support for raws, if ever needed
    static serialize(node, buffer) {
        buffer.writeUint8(binaryTypeCommon.BinaryTypeMarshallingMap.FilterListNode);
        buffer.writeUint8(filterListCommon.FilterListNodeMarshallingMap.Children);
        const count = node.children.length;
        buffer.writeUint32(count);
        for (let i = 0; i < count; i += 1) {
            ruleSerializer.RuleSerializer.serialize(node.children[i], buffer);
        }
        if (!typeGuards.isUndefined(node.start)) {
            buffer.writeUint8(filterListCommon.FilterListNodeMarshallingMap.Start);
            buffer.writeUint32(node.start);
        }
        if (!typeGuards.isUndefined(node.end)) {
            buffer.writeUint8(filterListCommon.FilterListNodeMarshallingMap.End);
            buffer.writeUint32(node.end);
        }
        buffer.writeUint8(constants.NULL);
    }
}

exports.FilterListSerializer = FilterListSerializer;
