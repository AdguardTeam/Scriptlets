'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fs = _interopDefault(require('fs-extra'));
var posthtml = _interopDefault(require('posthtml'));
var insertAt = _interopDefault(require('posthtml-insert-at'));
var jsBeautify = require('js-beautify');

const defaultTemplate = `
  <!doctype html>
  <html>
    <head>
      <meta charset="utf-8">
      <title>Rollup App</title>
    </head>
    <body>
    </body>
  </html>
`;
function generateHtml(options = {}) {
  const {
    filename,
    formatInline = false,
    inline = false,
    template,
    selector = 'body'
  } = options;

  if (!filename) {
    throw new Error('"filename" is required');
  }

  return {
    name: 'generate-html',

    async generateBundle(_, bundle) {
      const templateHtml = template ? await fs.readFile(template, 'utf8') : defaultTemplate;
      let scriptTags = '';

      if (inline) {
        Object.entries(bundle).forEach(([chunkTitle, chunkInfo]) => {
          if (chunkInfo.isEntry) {
            scriptTags = `${scriptTags}<script>${chunkInfo.code}</script>`;
            delete bundle[chunkTitle];
          }
        });
      } else {
        Object.values(bundle).forEach(chunkInfo => {
          if (chunkInfo.isEntry) {
            scriptTags = `${scriptTags}<script src="${chunkInfo.fileName}"></script>`;
          }
        });
      }

      const generatedHtml = await posthtml([scriptTags.length && insertAt({
        selector,
        append: scriptTags
      })]).process(templateHtml);
      await fs.outputFile(filename, jsBeautify.html(generatedHtml.html, {
        html: {
          end_with_newline: true,
          extra_liners: [],
          indent_inner_html: true,
          indent_size: 2,
          content_unformatted: [!formatInline && 'script'],
          css: {
            end_with_newline: false
          },
          js: {
            end_with_newline: false
          }
        }
      }));
    }

  };
}

module.exports = generateHtml;
