/**
 * @file Parser for special uBO selectors.
 */
import { type UboSelector } from '../../nodes';
import { BaseParser } from '../base-parser';
/**
 * Possible error messages for uBO selectors. Formatted with {@link sprintf}.
 */
export declare const ERROR_MESSAGES: {
    DUPLICATED_UBO_MODIFIER: string;
    EXPECTED_BUT_GOT_BEFORE: string;
    NEGATED_UBO_MODIFIER_CANNOT_BE_FOLLOWED_BY: string;
    NEGATED_UBO_MODIFIER_CANNOT_BE_PRECEDED_BY: string;
    PSEUDO_CANNOT_BE_NESTED: string;
    UBO_MODIFIER_CANNOT_BE_NESTED: string;
    UBO_STYLE_CANNOT_BE_FOLLOWED: string;
};
/**
 * A simple helper function to format a pseudo name for error messages.
 *
 * @param name Pseudo name.
 * @param wrapper Wrapper pseudo name (eg. `not`) (optional, defaults to `undefined`).
 * @returns Formatted pseudo name.
 * @example
 * ```ts
 * formatPseudoName('matches-path', 'not'); // => ':not(:matches-path(...))'
 * formatPseudoName('matches-media'); // => ':matches-media(...)'
 * ```
 */
export declare const formatPseudoName: (name: string, wrapper?: string) => string;
/**
 * Parser for uBO selectors.
 */
export declare class UboSelectorParser extends BaseParser {
    /**
     * Parses a uBO selector list, eg. `div:matches-path(/path)`.
     *
     * @param raw Raw input to parse.
     * @param options Global parser options.
     * @param baseOffset Starting offset of the input. Node locations are calculated relative to this offset.
     *
     * @returns Parsed uBO selector {@link UboSelectorParser}.
     * @throws An {@link AdblockSyntaxError} if the selector list is syntactically invalid.
     */
    static parse(raw: string, options?: import("../options").ParserOptions, baseOffset?: number): UboSelector;
}
