/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var agentCommentSerializer = require('./agent-comment-serializer.js');
var index = require('../../nodes/index.js');
var configCommentSerializer = require('./config-comment-serializer.js');
var hintCommentSerializer = require('./hint-comment-serializer.js');
var metadataCommentSerializer = require('./metadata-comment-serializer.js');
var preProcessorCommentSerializer = require('./pre-processor-comment-serializer.js');
var simpleCommentSerializer = require('./simple-comment-serializer.js');
var baseSerializer = require('../base-serializer.js');

/**
 * `CommentRuleSerializer` is responsible for serializing any comment-like adblock rules.
 *
 * @example
 * Example rules:
 *  - Adblock agent rules:
 *      - ```adblock
 *        [AdGuard]
 *        ```
 *      - ```adblock
 *        [Adblock Plus 2.0]
 *        ```
 *      - etc.
 *  - AdGuard hint rules:
 *      - ```adblock
 *        !+ NOT_OPTIMIZED
 *        ```
 *      - ```adblock
 *        !+ NOT_OPTIMIZED PLATFORM(windows)
 *        ```
 *      - etc.
 *  - Pre-processor rules:
 *      - ```adblock
 *        !#if (adguard)
 *        ```
 *      - ```adblock
 *        !#endif
 *        ```
 *      - etc.
 *  - Metadata rules:
 *      - ```adblock
 *        ! Title: My List
 *        ```
 *      - ```adblock
 *        ! Version: 2.0.150
 *        ```
 *      - etc.
 *  - AGLint inline config rules:
 *      - ```adblock
 *        ! aglint-enable some-rule
 *        ```
 *      - ```adblock
 *        ! aglint-disable some-rule
 *        ```
 *      - etc.
 *  - Simple comments:
 *      - Regular version:
 *        ```adblock
 *        ! This is just a comment
 *        ```
 *      - uBlock Origin / "hostlist" version:
 *        ```adblock
 *        # This is just a comment
 *        ```
 *      - etc.
 */
class CommentRuleSerializer extends baseSerializer.BaseSerializer {
    /**
     * Serializes a comment rule node to binary format.
     *
     * @param node Node to serialize.
     * @param buffer ByteBuffer for writing binary data.
     */
    static serialize(node, buffer) {
        switch (node.type) {
            case index.CommentRuleType.AgentCommentRule:
                agentCommentSerializer.AgentCommentSerializer.serialize(node, buffer);
                return;
            case index.CommentRuleType.HintCommentRule:
                hintCommentSerializer.HintCommentSerializer.serialize(node, buffer);
                return;
            case index.CommentRuleType.PreProcessorCommentRule:
                preProcessorCommentSerializer.PreProcessorCommentSerializer.serialize(node, buffer);
                return;
            case index.CommentRuleType.MetadataCommentRule:
                metadataCommentSerializer.MetadataCommentSerializer.serialize(node, buffer);
                return;
            case index.CommentRuleType.ConfigCommentRule:
                configCommentSerializer.ConfigCommentSerializer.serialize(node, buffer);
                return;
            case index.CommentRuleType.CommentRule:
                simpleCommentSerializer.SimpleCommentSerializer.serialize(node, buffer);
                break;
            default:
                throw new Error('Unknown comment rule type');
        }
    }
}

exports.CommentRuleSerializer = CommentRuleSerializer;
