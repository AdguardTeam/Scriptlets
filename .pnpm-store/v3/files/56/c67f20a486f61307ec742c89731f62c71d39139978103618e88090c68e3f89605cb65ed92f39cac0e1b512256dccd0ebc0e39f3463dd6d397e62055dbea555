/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var adblockers = require('../../utils/adblockers.js');
var domainListDeserializer = require('../misc/domain-list-deserializer.js');
var constants = require('../../utils/constants.js');
var index = require('../../nodes/index.js');
var abpSnippetInjectionBodyDeserializer = require('./scriptlet-body/abp-snippet-injection-body-deserializer.js');
var uboScriptletInjectionBodyDeserializer = require('./scriptlet-body/ubo-scriptlet-injection-body-deserializer.js');
var adgScriptletInjectionBodyDeserializer = require('./scriptlet-body/adg-scriptlet-injection-body-deserializer.js');
var valueDeserializer = require('../misc/value-deserializer.js');
var typeGuards = require('../../utils/type-guards.js');
var baseDeserializer = require('../base-deserializer.js');
var elementHidingBodyDeserializer = require('./element-hiding-body-deserializer.js');
var cssInjectionBodyDeserializer = require('./css-injection-body-deserializer.js');
var modifierListDeserializer = require('../misc/modifier-list-deserializer.js');
var cosmeticRuleCommon = require('../../marshalling-utils/cosmetic/cosmetic-rule-common.js');
var binaryTypeCommon = require('../../marshalling-utils/misc/binary-type-common.js');
var syntaxDeserializationMap = require('../syntax-deserialization-map.js');

/* eslint-disable no-param-reassign */
/**
 * Value map for binary deserialization. This helps to reduce the size of the serialized data,
 * as it allows us to use a single byte to represent frequently used values.
 */
let cosmeticRuleSeparatorDeserializationMap;
const getCosmeticRuleSeparatorDeserializationMap = () => {
    if (!cosmeticRuleSeparatorDeserializationMap) {
        cosmeticRuleSeparatorDeserializationMap = new Map(Array.from(cosmeticRuleCommon.COSMETIC_RULE_SEPARATOR_SERIALIZATION_MAP).map(([key, value]) => [value, key]));
    }
    return cosmeticRuleSeparatorDeserializationMap;
};
/**
 * Value map for binary deserialization. This helps to reduce the size of the serialized data,
 * as it allows us to use a single byte to represent frequently used values.
 */
const COSMETIC_RULE_TYPE_DESERIALIZATION_MAP = new Map([
    [binaryTypeCommon.BinaryTypeMarshallingMap.ElementHidingRule, index.CosmeticRuleType.ElementHidingRule],
    [binaryTypeCommon.BinaryTypeMarshallingMap.CssInjectionRule, index.CosmeticRuleType.CssInjectionRule],
    [binaryTypeCommon.BinaryTypeMarshallingMap.ScriptletInjectionRule, index.CosmeticRuleType.ScriptletInjectionRule],
    [binaryTypeCommon.BinaryTypeMarshallingMap.JsInjectionRule, index.CosmeticRuleType.JsInjectionRule],
    [binaryTypeCommon.BinaryTypeMarshallingMap.HtmlFilteringRule, index.CosmeticRuleType.HtmlFilteringRule],
]);
class CosmeticRuleDeserializer extends baseDeserializer.BaseDeserializer {
    /**
     * Deserializes a cosmetic rule node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     */
    static deserialize(buffer, node) {
        const type = COSMETIC_RULE_TYPE_DESERIALIZATION_MAP.get(buffer.readUint8());
        if (typeGuards.isUndefined(type)) {
            throw new Error(`Unknown rule type: ${type}`);
        }
        node.type = type;
        node.category = index.RuleCategory.Cosmetic;
        const syntax = syntaxDeserializationMap.getSyntaxDeserializationMap().get(buffer.readUint8()) ?? adblockers.AdblockSyntax.Common;
        node.syntax = syntax;
        node.modifiers = undefined;
        switch (type) {
            case index.CosmeticRuleType.ElementHidingRule:
                elementHidingBodyDeserializer.ElementHidingBodyDeserializer.deserializeElementHidingBody(buffer, node.body = {});
                break;
            case index.CosmeticRuleType.CssInjectionRule:
                cssInjectionBodyDeserializer.CssInjectionBodyDeserializer.deserialize(buffer, node.body = {});
                break;
            case index.CosmeticRuleType.JsInjectionRule:
                valueDeserializer.ValueDeserializer.deserialize(buffer, node.body = {});
                break;
            case index.CosmeticRuleType.HtmlFilteringRule:
                valueDeserializer.ValueDeserializer.deserialize(buffer, node.body = {});
                break;
            case index.CosmeticRuleType.ScriptletInjectionRule:
                switch (syntax) {
                    case adblockers.AdblockSyntax.Adg:
                        adgScriptletInjectionBodyDeserializer.AdgScriptletInjectionBodyDeserializer.deserialize(buffer, node.body = {});
                        break;
                    case adblockers.AdblockSyntax.Abp:
                        abpSnippetInjectionBodyDeserializer.AbpSnippetInjectionBodyDeserializer.deserialize(buffer, node.body = {});
                        break;
                    case adblockers.AdblockSyntax.Ubo:
                        uboScriptletInjectionBodyDeserializer.UboScriptletInjectionBodyDeserializer.deserialize(buffer, node.body = {});
                        break;
                    default:
                        throw new Error('Scriptlet rule should have an explicit syntax');
                }
                break;
            default:
                throw new Error('Unknown cosmetic rule type');
        }
        let prop = buffer.readUint8();
        while (prop !== constants.NULL) {
            switch (prop) {
                case cosmeticRuleCommon.CosmeticRuleMarshallingMap.Exception:
                    node.exception = buffer.readUint8() === 1;
                    break;
                case cosmeticRuleCommon.CosmeticRuleMarshallingMap.Separator:
                    valueDeserializer.ValueDeserializer.deserialize(buffer, node.separator = {}, getCosmeticRuleSeparatorDeserializationMap());
                    break;
                case cosmeticRuleCommon.CosmeticRuleMarshallingMap.Modifiers:
                    node.modifiers = {};
                    modifierListDeserializer.ModifierListDeserializer.deserialize(buffer, node.modifiers);
                    break;
                case cosmeticRuleCommon.CosmeticRuleMarshallingMap.Domains:
                    domainListDeserializer.DomainListDeserializer.deserialize(buffer, node.domains = {});
                    break;
                case cosmeticRuleCommon.CosmeticRuleMarshallingMap.Start:
                    node.start = buffer.readUint32();
                    break;
                case cosmeticRuleCommon.CosmeticRuleMarshallingMap.End:
                    node.end = buffer.readUint32();
                    break;
                default:
                    throw new Error(`Unknown property: ${prop}`);
            }
            prop = buffer.readUint8();
        }
    }
}

exports.CosmeticRuleDeserializer = CosmeticRuleDeserializer;
