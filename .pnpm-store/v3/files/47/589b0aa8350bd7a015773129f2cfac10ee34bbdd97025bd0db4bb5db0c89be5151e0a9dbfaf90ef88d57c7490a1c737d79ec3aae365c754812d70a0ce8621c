/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var baseDeserializer = require('./base-deserializer.js');
var commentRuleDeserializer = require('./comment/comment-rule-deserializer.js');
var cosmeticRuleDeserializer = require('./cosmetic/cosmetic-rule-deserializer.js');
var hostRuleDeserializer = require('./network/host-rule-deserializer.js');
var networkRuleDeserializer = require('./network/network-rule-deserializer.js');
var emptyRuleDeserializer = require('./empty-rule-deserializer.js');
var invalidRuleDeserializer = require('./invalid-rule-deserializer.js');
var binaryTypeCommon = require('../marshalling-utils/misc/binary-type-common.js');

/**
 * `RuleDeserializer` is responsible for deserializing the rules.
 *
 * It automatically determines the category and syntax of the rule, so you can pass any kind of rule to it.
 */
class RuleDeserializer extends baseDeserializer.BaseDeserializer {
    /**
     * Deserializes a rule node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     */
    static deserialize(buffer, node) {
        // lookup instead of storing +1 byte
        const type = buffer.peekUint8();
        switch (type) {
            case binaryTypeCommon.BinaryTypeMarshallingMap.AgentRuleNode:
            case binaryTypeCommon.BinaryTypeMarshallingMap.HintRuleNode:
            case binaryTypeCommon.BinaryTypeMarshallingMap.PreProcessorCommentRuleNode:
            case binaryTypeCommon.BinaryTypeMarshallingMap.MetadataCommentRuleNode:
            case binaryTypeCommon.BinaryTypeMarshallingMap.ConfigCommentRuleNode:
            case binaryTypeCommon.BinaryTypeMarshallingMap.CommentRuleNode:
                commentRuleDeserializer.CommentRuleDeserializer.deserialize(buffer, node);
                break;
            case binaryTypeCommon.BinaryTypeMarshallingMap.ElementHidingRule:
            case binaryTypeCommon.BinaryTypeMarshallingMap.CssInjectionRule:
            case binaryTypeCommon.BinaryTypeMarshallingMap.ScriptletInjectionRule:
            case binaryTypeCommon.BinaryTypeMarshallingMap.HtmlFilteringRule:
            case binaryTypeCommon.BinaryTypeMarshallingMap.JsInjectionRule:
                cosmeticRuleDeserializer.CosmeticRuleDeserializer.deserialize(buffer, node);
                break;
            case binaryTypeCommon.BinaryTypeMarshallingMap.NetworkRuleNode:
                networkRuleDeserializer.NetworkRuleDeserializer.deserialize(buffer, node);
                break;
            case binaryTypeCommon.BinaryTypeMarshallingMap.HostRuleNode:
                hostRuleDeserializer.HostRuleDeserializer.deserialize(buffer, node);
                break;
            case binaryTypeCommon.BinaryTypeMarshallingMap.EmptyRule:
                emptyRuleDeserializer.EmptyRuleDeserializer.deserialize(buffer, node);
                break;
            case binaryTypeCommon.BinaryTypeMarshallingMap.InvalidRule:
                invalidRuleDeserializer.InvalidRuleDeserializer.deserialize(buffer, node);
                break;
            default:
                throw new Error('Unknown rule category');
        }
    }
}

exports.RuleDeserializer = RuleDeserializer;
