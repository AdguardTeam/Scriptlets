/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var constants = require('../../utils/constants.js');
var index = require('../../nodes/index.js');
var valueDeserializer = require('../misc/value-deserializer.js');
var baseDeserializer = require('../base-deserializer.js');
var modifierListDeserializer = require('../misc/modifier-list-deserializer.js');
var networkRuleCommon = require('../../marshalling-utils/network/network-rule-common.js');
var adblockers = require('../../utils/adblockers.js');
var binaryTypeCommon = require('../../marshalling-utils/misc/binary-type-common.js');
var syntaxDeserializationMap = require('../syntax-deserialization-map.js');

/* eslint-disable no-param-reassign */
/**
 * `NetworkRuleDeserializer` is responsible for deserializing network rules.
 *
 * @see {@link https://kb.adguard.com/en/general/how-to-create-your-own-ad-filters#basic-rules}
 * @see {@link https://help.eyeo.com/adblockplus/how-to-write-filters#basic}
 */
class NetworkRuleDeserializer extends baseDeserializer.BaseDeserializer {
    /**
     * Deserializes a network rule node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     */
    static deserialize(buffer, node) {
        buffer.assertUint8(binaryTypeCommon.BinaryTypeMarshallingMap.NetworkRuleNode);
        node.type = index.NetworkRuleType.NetworkRule;
        node.category = index.RuleCategory.Network;
        node.modifiers = undefined;
        let prop = buffer.readUint8();
        while (prop !== constants.NULL) {
            switch (prop) {
                case networkRuleCommon.NetworkRuleMarshallingMap.Syntax:
                    node.syntax = syntaxDeserializationMap.getSyntaxDeserializationMap().get(buffer.readUint8()) ?? adblockers.AdblockSyntax.Common;
                    break;
                case networkRuleCommon.NetworkRuleMarshallingMap.Exception:
                    node.exception = buffer.readUint8() === 1;
                    break;
                case networkRuleCommon.NetworkRuleMarshallingMap.Pattern:
                    valueDeserializer.ValueDeserializer.deserialize(buffer, node.pattern = {});
                    break;
                case networkRuleCommon.NetworkRuleMarshallingMap.ModifierList:
                    modifierListDeserializer.ModifierListDeserializer.deserialize(buffer, node.modifiers = {});
                    break;
                case networkRuleCommon.NetworkRuleMarshallingMap.Start:
                    node.start = buffer.readUint32();
                    break;
                case networkRuleCommon.NetworkRuleMarshallingMap.End:
                    node.end = buffer.readUint32();
                    break;
                default:
                    throw new Error(`Invalid property: ${prop}.`);
            }
            prop = buffer.readUint8();
        }
    }
}

exports.NetworkRuleDeserializer = NetworkRuleDeserializer;
