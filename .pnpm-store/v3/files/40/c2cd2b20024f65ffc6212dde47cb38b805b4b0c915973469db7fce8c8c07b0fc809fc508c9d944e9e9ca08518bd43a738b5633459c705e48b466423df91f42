/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var baseDeserializer = require('./base-deserializer.js');
var index = require('../nodes/index.js');
var constants = require('../utils/constants.js');
var invalidRuleErrorNodeDeserializer = require('./invalid-rule-error-node-deserializer.js');
var invalidRuleCommon = require('../marshalling-utils/invalid-rule-common.js');
var binaryTypeCommon = require('../marshalling-utils/misc/binary-type-common.js');

/* eslint-disable no-param-reassign */
class InvalidRuleDeserializer extends baseDeserializer.BaseDeserializer {
    /**
     * Deserializes an invalid rule node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     */
    static deserialize(buffer, node) {
        buffer.assertUint8(binaryTypeCommon.BinaryTypeMarshallingMap.InvalidRule);
        node.type = 'InvalidRule';
        node.category = index.RuleCategory.Invalid;
        let prop = buffer.readUint8();
        while (prop !== constants.NULL) {
            switch (prop) {
                case invalidRuleCommon.InvalidRuleMarshallingMap.Error:
                    invalidRuleErrorNodeDeserializer.InvalidRuleErrorNodeDeserializer.deserialize(buffer, node.error = {});
                    break;
                case invalidRuleCommon.InvalidRuleMarshallingMap.Start:
                    node.start = buffer.readUint32();
                    break;
                case invalidRuleCommon.InvalidRuleMarshallingMap.End:
                    node.end = buffer.readUint32();
                    break;
                default:
                    throw new Error(`Invalid property: ${prop}.`);
            }
            prop = buffer.readUint8();
        }
    }
}

exports.InvalidRuleDeserializer = InvalidRuleDeserializer;
