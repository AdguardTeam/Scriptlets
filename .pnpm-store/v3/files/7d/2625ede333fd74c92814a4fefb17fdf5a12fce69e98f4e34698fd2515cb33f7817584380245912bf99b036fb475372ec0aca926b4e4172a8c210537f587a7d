/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var baseSerializer = require('./base-serializer.js');
var typeGuards = require('../utils/type-guards.js');
var constants = require('../utils/constants.js');
var emptyRuleCommon = require('../marshalling-utils/empty-rule-common.js');
var binaryTypeCommon = require('../marshalling-utils/misc/binary-type-common.js');

class EmptyRuleSerializer extends baseSerializer.BaseSerializer {
    /**
     * Serializes an empty rule node to binary format.
     *
     * @param node Node to serialize.
     * @param buffer ByteBuffer for writing binary data.
     */
    static serialize(node, buffer) {
        buffer.writeUint8(binaryTypeCommon.BinaryTypeMarshallingMap.EmptyRule);
        if (!typeGuards.isUndefined(node.start)) {
            buffer.writeUint8(emptyRuleCommon.EmptyRuleMarshallingMap.Start);
            buffer.writeUint32(node.start);
        }
        if (!typeGuards.isUndefined(node.end)) {
            buffer.writeUint8(emptyRuleCommon.EmptyRuleMarshallingMap.End);
            buffer.writeUint32(node.end);
        }
        buffer.writeUint8(constants.NULL);
    }
}

exports.EmptyRuleSerializer = EmptyRuleSerializer;
