/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var cssTokenizer = require('@adguard/css-tokenizer');
var sprintfJs = require('sprintf-js');
var ruleConversionError = require('../../errors/rule-conversion-error.js');
var index = require('../../nodes/index.js');
var ruleConverterBase = require('../base-interfaces/rule-converter-base.js');
var modifiers = require('../../ast-utils/modifiers.js');
var constants = require('../../utils/constants.js');
var regexp = require('../../utils/regexp.js');
var networkRules = require('../../ast-utils/network-rules.js');
var adblockers = require('../../utils/adblockers.js');
var conversionResult = require('../base-interfaces/conversion-result.js');
var cssTokenStream = require('../../parser/css/css-token-stream.js');

/**
 * @file Converter for request header removal rules
 */
const UBO_RESPONSEHEADER_FN = 'responseheader';
const ADG_REMOVEHEADER_MODIFIER = 'removeheader';
const ERROR_MESSAGES = {
    EMPTY_PARAMETER: `Empty parameter for '${UBO_RESPONSEHEADER_FN}' function`,
    EXPECTED_END_OF_RULE: "Expected end of rule, but got '%s'",
    MULTIPLE_DOMAINS_NOT_SUPPORTED: 'Multiple domains are not supported yet',
};
/**
 * Converter for request header removal rules
 *
 * @todo Implement `convertToUbo` (ABP currently doesn't support header removal rules)
 */
class HeaderRemovalRuleConverter extends ruleConverterBase.RuleConverterBase {
    /**
     * Converts a header removal rule to AdGuard syntax, if possible.
     *
     * @param rule Rule node to convert
     * @returns An object which follows the {@link NodeConversionResult} interface. Its `result` property contains
     * the array of converted rule nodes, and its `isConverted` flag indicates whether the original rule was converted.
     * If the rule was not converted, the result array will contain the original node with the same object reference
     * @throws If the rule is invalid or cannot be converted
     * @example
     * If the input rule is:
     * ```adblock
     * example.com##^responseheader(header-name)
     * ```
     * The output will be:
     * ```adblock
     * ||example.com^$removeheader=header-name
     * ```
     */
    static convertToAdg(rule) {
        // TODO: Add support for ABP syntax once it starts supporting header removal rules
        // Leave the rule as is if it's not a header removal rule
        if (rule.category !== index.RuleCategory.Cosmetic || rule.type !== index.CosmeticRuleType.HtmlFilteringRule) {
            return conversionResult.createNodeConversionResult([rule], false);
        }
        const stream = new cssTokenStream.CssTokenStream(rule.body.value);
        let token;
        // Skip leading whitespace
        stream.skipWhitespace();
        // Next token should be the `^` followed by a `responseheader` function
        token = stream.get();
        if (!token || token.type !== cssTokenizer.TokenType.Delim || rule.body.value[token.start] !== constants.UBO_HTML_MASK) {
            return conversionResult.createNodeConversionResult([rule], false);
        }
        stream.advance();
        token = stream.get();
        if (!token) {
            return conversionResult.createNodeConversionResult([rule], false);
        }
        const functionName = rule.body.value.slice(token.start, token.end - 1);
        if (functionName !== UBO_RESPONSEHEADER_FN) {
            return conversionResult.createNodeConversionResult([rule], false);
        }
        // Parse the parameter
        const paramStart = token.end;
        stream.skipUntilBalanced();
        const paramEnd = stream.getOrFail().end;
        const param = rule.body.value.slice(paramStart, paramEnd - 1).trim();
        // Do not allow empty parameter
        if (param.length === 0) {
            throw new ruleConversionError.RuleConversionError(ERROR_MESSAGES.EMPTY_PARAMETER);
        }
        stream.expect(cssTokenizer.TokenType.CloseParenthesis);
        stream.advance();
        // Skip trailing whitespace after the function call
        stream.skipWhitespace();
        // Expect the end of the rule - so nothing should be left in the stream
        if (!stream.isEof()) {
            token = stream.getOrFail();
            throw new ruleConversionError.RuleConversionError(sprintfJs.sprintf(ERROR_MESSAGES.EXPECTED_END_OF_RULE, cssTokenizer.getFormattedTokenName(token.type)));
        }
        // Prepare network rule pattern
        const pattern = [];
        if (rule.domains.children.length === 1) {
            // If the rule has only one domain, we can use a simple network rule pattern:
            // ||single-domain-from-the-rule^
            pattern.push(regexp.ADBLOCK_URL_START, rule.domains.children[0].value, regexp.ADBLOCK_URL_SEPARATOR);
        }
        else if (rule.domains.children.length > 1) {
            // TODO: Add support for multiple domains, for example:
            // example.com,example.org,example.net##^responseheader(header-name)
            // We should consider allowing $domain with $removeheader modifier,
            // for example:
            // $removeheader=header-name,domain=example.com|example.org|example.net
            throw new ruleConversionError.RuleConversionError(ERROR_MESSAGES.MULTIPLE_DOMAINS_NOT_SUPPORTED);
        }
        // Prepare network rule modifiers
        const modifiers$1 = modifiers.createModifierListNode();
        modifiers$1.children.push(modifiers.createModifierNode(ADG_REMOVEHEADER_MODIFIER, param));
        // Construct the network rule
        return conversionResult.createNodeConversionResult([
            networkRules.createNetworkRuleNode(pattern.join(constants.EMPTY), modifiers$1, 
            // Copy the exception flag
            rule.exception, adblockers.AdblockSyntax.Adg),
        ], true);
    }
}

exports.ERROR_MESSAGES = ERROR_MESSAGES;
exports.HeaderRemovalRuleConverter = HeaderRemovalRuleConverter;
