/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var baseGenerator = require('../base-generator.js');
var index = require('../../nodes/index.js');
var constants = require('../../utils/constants.js');
var adblockers = require('../../utils/adblockers.js');
var adgScriptletInjectionBodyGenerator = require('./body/adg-scriptlet-injection-body-generator.js');
var adgCssInjectionGenerator = require('../css/adg-css-injection-generator.js');
var abpSnippetInjectionBodyGenerator = require('./body/abp-snippet-injection-body-generator.js');
var uboScriptletInjectionBodyGenerator = require('./body/ubo-scriptlet-injection-body-generator.js');
var uboSelectorCommon = require('../../common/ubo-selector-common.js');

class CosmeticRuleBodyGenerator extends baseGenerator.BaseGenerator {
    /**
     * Generates the rule body from the node.
     *
     * @param node Cosmetic rule node
     * @returns Raw rule body
     * @example
     * - '##.foo' → '.foo'
     * - 'example.com,example.org##.foo' → '.foo'
     * - 'example.com#%#//scriptlet('foo')' → '//scriptlet('foo')'
     */
    static generate(node) {
        let result = constants.EMPTY;
        // Body
        switch (node.type) {
            case index.CosmeticRuleType.ElementHidingRule:
                result = node.body.selectorList.value;
                break;
            case index.CosmeticRuleType.CssInjectionRule:
                if (node.syntax === adblockers.AdblockSyntax.Adg) {
                    result = adgCssInjectionGenerator.AdgCssInjectionGenerator.generate(node.body);
                }
                else if (node.syntax === adblockers.AdblockSyntax.Ubo) {
                    if (node.body.mediaQueryList) {
                        result += constants.COLON;
                        result += uboSelectorCommon.UboPseudoName.MatchesMedia;
                        result += constants.OPEN_PARENTHESIS;
                        result += node.body.mediaQueryList.value;
                        result += constants.CLOSE_PARENTHESIS;
                        result += constants.SPACE;
                    }
                    result += node.body.selectorList.value;
                    if (node.body.remove) {
                        result += constants.COLON;
                        result += uboSelectorCommon.UboPseudoName.Remove;
                        result += constants.OPEN_PARENTHESIS;
                        result += constants.CLOSE_PARENTHESIS;
                    }
                    else if (node.body.declarationList) {
                        result += constants.COLON;
                        result += uboSelectorCommon.UboPseudoName.Style;
                        result += constants.OPEN_PARENTHESIS;
                        result += node.body.declarationList.value;
                        result += constants.CLOSE_PARENTHESIS;
                    }
                }
                break;
            case index.CosmeticRuleType.HtmlFilteringRule:
            case index.CosmeticRuleType.JsInjectionRule:
                result = node.body.value;
                break;
            case index.CosmeticRuleType.ScriptletInjectionRule:
                switch (node.syntax) {
                    case adblockers.AdblockSyntax.Adg:
                        result = adgScriptletInjectionBodyGenerator.AdgScriptletInjectionBodyGenerator.generate(node.body);
                        break;
                    case adblockers.AdblockSyntax.Abp:
                        result = abpSnippetInjectionBodyGenerator.AbpSnippetInjectionBodyGenerator.generate(node.body);
                        break;
                    case adblockers.AdblockSyntax.Ubo:
                        result = uboScriptletInjectionBodyGenerator.UboScriptletInjectionBodyGenerator.generate(node.body);
                        break;
                    default:
                        throw new Error('Scriptlet rule should have an explicit syntax');
                }
                break;
            default:
                throw new Error('Unknown cosmetic rule type');
        }
        return result;
    }
}

exports.CosmeticRuleBodyGenerator = CosmeticRuleBodyGenerator;
