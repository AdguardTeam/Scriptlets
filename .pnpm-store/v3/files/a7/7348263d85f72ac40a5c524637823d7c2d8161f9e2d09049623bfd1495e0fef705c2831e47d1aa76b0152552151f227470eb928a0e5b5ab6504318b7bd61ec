/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var constants = require('../../utils/constants.js');
var typeGuards = require('../../utils/type-guards.js');
var baseSerializer = require('../base-serializer.js');
var modifierSerializer = require('./modifier-serializer.js');
var modifierListCommon = require('../../marshalling-utils/misc/modifier-list-common.js');
var binaryTypeCommon = require('../../marshalling-utils/misc/binary-type-common.js');

/**
 * `ModifierListSerializer` is responsible for serializing modifier lists. Please note that the name is not
 * uniform, "modifiers" are also known as "options".
 *
 * @see {@link https://kb.adguard.com/en/general/how-to-create-your-own-ad-filters#basic-rules-modifiers}
 * @see {@link https://kb.adguard.com/en/general/how-to-create-your-own-ad-filters#non-basic-rules-modifiers}
 * @see {@link https://help.eyeo.com/adblockplus/how-to-write-filters#options}
 */
class ModifierListSerializer extends baseSerializer.BaseSerializer {
    /**
     * Serializes a modifier list node to binary format.
     *
     * @param node Node to serialize.
     * @param buffer ByteBuffer for writing binary data.
     */
    static serialize(node, buffer) {
        buffer.writeUint8(binaryTypeCommon.BinaryTypeMarshallingMap.ModifierListNode);
        const count = node.children.length;
        if (count) {
            buffer.writeUint8(modifierListCommon.ModifierListNodeMarshallingMap.Children);
            // note: we store the count, because re-construction of the array is faster if we know the length
            if (count > constants.UINT16_MAX) {
                throw new Error(`Too many modifiers: ${count}, the limit is ${constants.UINT16_MAX}`);
            }
            buffer.writeUint16(count);
            for (let i = 0; i < count; i += 1) {
                modifierSerializer.ModifierSerializer.serialize(node.children[i], buffer);
            }
        }
        if (!typeGuards.isUndefined(node.start)) {
            buffer.writeUint8(modifierListCommon.ModifierListNodeMarshallingMap.Start);
            buffer.writeUint32(node.start);
        }
        if (!typeGuards.isUndefined(node.end)) {
            buffer.writeUint8(modifierListCommon.ModifierListNodeMarshallingMap.End);
            buffer.writeUint32(node.end);
        }
        buffer.writeUint8(constants.NULL);
    }
}

exports.ModifierListSerializer = ModifierListSerializer;
