/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var constants = require('./constants.js');
var binarySchemaVersion = require('./binary-schema-version.js');
var adblockers = require('./adblockers.js');
var cosmeticRuleSeparator = require('./cosmetic-rule-separator.js');
var domain = require('./domain.js');
var logicalExpression = require('./logical-expression.js');
var regexp = require('./regexp.js');
var quotes = require('./quotes.js');
var positionProvider = require('./position-provider.js');
var outputByteBuffer = require('./output-byte-buffer.js');
var inputByteBuffer = require('./input-byte-buffer.js');
var byteBuffer = require('./byte-buffer.js');
var textEncoderPolyfill = require('./text-encoder-polyfill.js');
var textDecoderPolyfill = require('./text-decoder-polyfill.js');
var categorizer = require('./categorizer.js');



exports.ADG_SCRIPTLET_MASK = constants.ADG_SCRIPTLET_MASK;
exports.AGLINT_COMMAND_PREFIX = constants.AGLINT_COMMAND_PREFIX;
exports.COMMA_DOMAIN_LIST_SEPARATOR = constants.COMMA_DOMAIN_LIST_SEPARATOR;
exports.HINT_MARKER = constants.HINT_MARKER;
exports.IF = constants.IF;
exports.INCLUDE = constants.INCLUDE;
exports.MODIFIERS_SEPARATOR = constants.MODIFIERS_SEPARATOR;
exports.MODIFIER_ASSIGN_OPERATOR = constants.MODIFIER_ASSIGN_OPERATOR;
exports.NEGATION_MARKER = constants.NEGATION_MARKER;
exports.NETWORK_RULE_EXCEPTION_MARKER = constants.NETWORK_RULE_EXCEPTION_MARKER;
exports.NETWORK_RULE_SEPARATOR = constants.NETWORK_RULE_SEPARATOR;
exports.PIPE_MODIFIER_SEPARATOR = constants.PIPE_MODIFIER_SEPARATOR;
exports.PREPROCESSOR_MARKER = constants.PREPROCESSOR_MARKER;
exports.SAFARI_CB_AFFINITY = constants.SAFARI_CB_AFFINITY;
exports.UBO_SCRIPTLET_MASK = constants.UBO_SCRIPTLET_MASK;
exports.BINARY_SCHEMA_VERSION = binarySchemaVersion.BINARY_SCHEMA_VERSION;
Object.defineProperty(exports, "AdblockSyntax", {
	enumerable: true,
	get: function () { return adblockers.AdblockSyntax; }
});
exports.CosmeticRuleSeparatorUtils = cosmeticRuleSeparator.CosmeticRuleSeparatorUtils;
exports.DomainUtils = domain.DomainUtils;
exports.LogicalExpressionUtils = logicalExpression.LogicalExpressionUtils;
exports.ADBLOCK_URL_SEPARATOR = regexp.ADBLOCK_URL_SEPARATOR;
exports.ADBLOCK_URL_SEPARATOR_REGEX = regexp.ADBLOCK_URL_SEPARATOR_REGEX;
exports.ADBLOCK_URL_START = regexp.ADBLOCK_URL_START;
exports.ADBLOCK_URL_START_REGEX = regexp.ADBLOCK_URL_START_REGEX;
exports.ADBLOCK_WILDCARD = regexp.ADBLOCK_WILDCARD;
exports.ADBLOCK_WILDCARD_REGEX = regexp.ADBLOCK_WILDCARD_REGEX;
exports.RegExpUtils = regexp.RegExpUtils;
exports.SPECIAL_REGEX_SYMBOLS = regexp.SPECIAL_REGEX_SYMBOLS;
Object.defineProperty(exports, "QuoteType", {
	enumerable: true,
	get: function () { return quotes.QuoteType; }
});
exports.QuoteUtils = quotes.QuoteUtils;
exports.PositionProvider = positionProvider.PositionProvider;
exports.OutputByteBuffer = outputByteBuffer.OutputByteBuffer;
exports.InputByteBuffer = inputByteBuffer.InputByteBuffer;
exports.ByteBuffer = byteBuffer.ByteBuffer;
exports.encodeIntoPolyfill = textEncoderPolyfill.encodeIntoPolyfill;
exports.decodeTextPolyfill = textDecoderPolyfill.decodeTextPolyfill;
exports.RuleCategorizer = categorizer.RuleCategorizer;
