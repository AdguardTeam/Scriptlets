/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
import { NULL } from '../../utils/constants.mjs';
import { NetworkRuleType, RuleCategory } from '../../nodes/index.mjs';
import { ValueDeserializer } from '../misc/value-deserializer.mjs';
import { BaseDeserializer } from '../base-deserializer.mjs';
import { ModifierListDeserializer } from '../misc/modifier-list-deserializer.mjs';
import { NetworkRuleMarshallingMap } from '../../marshalling-utils/network/network-rule-common.mjs';
import { AdblockSyntax } from '../../utils/adblockers.mjs';
import { BinaryTypeMarshallingMap } from '../../marshalling-utils/misc/binary-type-common.mjs';
import { getSyntaxDeserializationMap } from '../syntax-deserialization-map.mjs';

/* eslint-disable no-param-reassign */
/**
 * `NetworkRuleDeserializer` is responsible for deserializing network rules.
 *
 * @see {@link https://kb.adguard.com/en/general/how-to-create-your-own-ad-filters#basic-rules}
 * @see {@link https://help.eyeo.com/adblockplus/how-to-write-filters#basic}
 */
class NetworkRuleDeserializer extends BaseDeserializer {
    /**
     * Deserializes a network rule node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     */
    static deserialize(buffer, node) {
        buffer.assertUint8(BinaryTypeMarshallingMap.NetworkRuleNode);
        node.type = NetworkRuleType.NetworkRule;
        node.category = RuleCategory.Network;
        node.modifiers = undefined;
        let prop = buffer.readUint8();
        while (prop !== NULL) {
            switch (prop) {
                case NetworkRuleMarshallingMap.Syntax:
                    node.syntax = getSyntaxDeserializationMap().get(buffer.readUint8()) ?? AdblockSyntax.Common;
                    break;
                case NetworkRuleMarshallingMap.Exception:
                    node.exception = buffer.readUint8() === 1;
                    break;
                case NetworkRuleMarshallingMap.Pattern:
                    ValueDeserializer.deserialize(buffer, node.pattern = {});
                    break;
                case NetworkRuleMarshallingMap.ModifierList:
                    ModifierListDeserializer.deserialize(buffer, node.modifiers = {});
                    break;
                case NetworkRuleMarshallingMap.Start:
                    node.start = buffer.readUint32();
                    break;
                case NetworkRuleMarshallingMap.End:
                    node.end = buffer.readUint32();
                    break;
                default:
                    throw new Error(`Invalid property: ${prop}.`);
            }
            prop = buffer.readUint8();
        }
    }
}

export { NetworkRuleDeserializer };
