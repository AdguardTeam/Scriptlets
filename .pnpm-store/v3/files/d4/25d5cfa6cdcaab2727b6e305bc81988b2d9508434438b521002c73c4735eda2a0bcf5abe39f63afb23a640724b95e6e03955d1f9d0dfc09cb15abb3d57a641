{"version":3,"file":"checkTemplateNames.cjs","names":["_jsdoccomment","require","_iterateJsdoc","_interopRequireDefault","e","__esModule","default","_default","exports","iterateJsdoc","context","utils","node","settings","report","mode","templateTags","getTags","usedNames","Set","checkForUsedTypes","potentialType","parsedType","tryParseType","parseType","traverse","nde","type","value","test","add","checkParamsAndReturnsTags","paramName","getPreferredTagName","tagName","paramTags","paramTag","returnsName","returnsTags","returnsTag","checkTemplateTags","tag","name","names","split","has","checkParameters","aliasDeclaration","checkParamsAndReturns","params","typeParameters","handleTypeAliases","_nde$declaration","declaration","callbackTags","functionTags","length","typedefTags","potentialTypedefType","propertyName","propertyTags","propertyTag","iterateAllJsdocs","meta","docs","description","url","schema","module"],"sources":["../../src/rules/checkTemplateNames.js"],"sourcesContent":["import {\n  parse as parseType,\n  traverse,\n  tryParse as tryParseType,\n} from '@es-joy/jsdoccomment';\nimport iterateJsdoc from '../iterateJsdoc.js';\n\nexport default iterateJsdoc(({\n  context,\n  utils,\n  node,\n  settings,\n  report,\n}) => {\n  const {\n    mode\n  } = settings;\n\n  const templateTags = utils.getTags('template');\n\n  const usedNames = new Set();\n  /**\n   * @param {string} potentialType\n   */\n  const checkForUsedTypes = (potentialType) => {\n    let parsedType;\n    try {\n      parsedType = mode === 'permissive' ?\n        tryParseType(/** @type {string} */ (potentialType)) :\n        parseType(/** @type {string} */ (potentialType), mode);\n    } catch {\n      return;\n    }\n\n    traverse(parsedType, (nde) => {\n      const {\n        type,\n        value,\n      } = /** @type {import('jsdoc-type-pratt-parser').NameResult} */ (nde);\n      if (type === 'JsdocTypeName' && (/^[A-Z]$/).test(value)) {\n        usedNames.add(value);\n      }\n    });\n  };\n\n  const checkParamsAndReturnsTags = () => {\n    const paramName = /** @type {string} */ (utils.getPreferredTagName({\n      tagName: 'param',\n    }));\n    const paramTags = utils.getTags(paramName);\n    for (const paramTag of paramTags) {\n      checkForUsedTypes(paramTag.type);\n    }\n\n    const returnsName = /** @type {string} */ (utils.getPreferredTagName({\n      tagName: 'returns',\n    }));\n    const returnsTags = utils.getTags(returnsName);\n    for (const returnsTag of returnsTags) {\n      checkForUsedTypes(returnsTag.type);\n    }\n  };\n\n  const checkTemplateTags = () => {\n    for (const tag of templateTags) {\n      const {name} = tag;\n      const names = name.split(/,\\s*/);\n      for (const name of names) {\n        if (!usedNames.has(name)) {\n          report(`@template ${name} not in use`, null, tag);\n        }\n      }\n    }\n  };\n\n  /**\n   * @param {import('@typescript-eslint/types').TSESTree.FunctionDeclaration|\n   *   import('@typescript-eslint/types').TSESTree.ClassDeclaration|\n   *   import('@typescript-eslint/types').TSESTree.TSInterfaceDeclaration|\n   *   import('@typescript-eslint/types').TSESTree.TSTypeAliasDeclaration} aliasDeclaration\n   * @param {boolean} [checkParamsAndReturns]\n   */\n  const checkParameters = (aliasDeclaration, checkParamsAndReturns) => {\n    /* c8 ignore next -- Guard */\n    const {params} = aliasDeclaration.typeParameters ?? {params: []};\n    for (const {name: {name}} of params) {\n      usedNames.add(name);\n    }\n    if (checkParamsAndReturns) {\n      checkParamsAndReturnsTags();\n    }\n\n    checkTemplateTags();\n  };\n\n  const handleTypeAliases = () => {\n    const nde = /** @type {import('@typescript-eslint/types').TSESTree.Node} */ (\n      node\n    );\n    if (!nde) {\n      return;\n    }\n    switch (nde.type) {\n    case 'ExportDefaultDeclaration':\n    case 'ExportNamedDeclaration':\n      switch (nde.declaration?.type) {\n        case 'FunctionDeclaration':\n          checkParameters(nde.declaration, true);\n          break;\n        case 'ClassDeclaration':\n        case 'TSTypeAliasDeclaration':\n        case 'TSInterfaceDeclaration':\n          checkParameters(nde.declaration);\n          break;\n      }\n      break;\n    case 'FunctionDeclaration':\n      checkParameters(nde, true);\n      break;\n    case 'ClassDeclaration':\n    case 'TSTypeAliasDeclaration':\n    case 'TSInterfaceDeclaration':\n      checkParameters(nde);\n      break;\n    }\n  };\n\n  const callbackTags = utils.getTags('callback');\n  const functionTags = utils.getTags('function');\n  if (callbackTags.length || functionTags.length) {\n    checkParamsAndReturnsTags();\n    checkTemplateTags();\n    return;\n  }\n\n  const typedefTags = utils.getTags('typedef');\n  if (!typedefTags.length || typedefTags.length >= 2) {\n    handleTypeAliases();\n    return;\n  }\n\n  const potentialTypedefType = typedefTags[0].type;\n  checkForUsedTypes(potentialTypedefType);\n\n  const propertyName = /** @type {string} */ (utils.getPreferredTagName({\n    tagName: 'property',\n  }));\n  const propertyTags = utils.getTags(propertyName);\n  for (const propertyTag of propertyTags) {\n    checkForUsedTypes(propertyTag.type);\n  }\n\n  for (const tag of templateTags) {\n    const {name} = tag;\n    const names = name.split(/,\\s*/);\n    for (const name of names) {\n      if (!usedNames.has(name)) {\n        report(`@template ${name} not in use`, null, tag);\n      }\n    }\n  }\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Checks that any `@template` names are actually used in the connected `@typedef` or type alias.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-template-names.md#repos-sticky-header',\n    },\n    schema: [],\n    type: 'suggestion',\n  },\n});\n"],"mappings":"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","ignoreList":[]}