/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var index = require('../../nodes/index.js');
var adblockers = require('../../utils/adblockers.js');
var html = require('./html.js');
var scriptlet = require('./scriptlet.js');
var ruleConversionError = require('../../errors/rule-conversion-error.js');
var ruleConverterBase = require('../base-interfaces/rule-converter-base.js');
var adg = require('./rule-modifiers/adg.js');
var css = require('./css.js');
var elementHiding = require('./element-hiding.js');
var headerRemoval = require('./header-removal.js');
var conversionResult = require('../base-interfaces/conversion-result.js');

/**
 * @file Cosmetic rule converter
 */
/**
 * Cosmetic rule converter class (also known as "non-basic rule converter")
 *
 * @todo Implement `convertToUbo` and `convertToAbp`
 */
class CosmeticRuleConverter extends ruleConverterBase.RuleConverterBase {
    /**
     * Converts a cosmetic rule to AdGuard syntax, if possible.
     *
     * @param rule Rule node to convert
     * @returns An object which follows the {@link NodeConversionResult} interface. Its `result` property contains
     * the array of converted rule nodes, and its `isConverted` flag indicates whether the original rule was converted.
     * If the rule was not converted, the result array will contain the original node with the same object reference
     * @throws If the rule is invalid or cannot be converted
     */
    static convertToAdg(rule) {
        let subconverterResult;
        // Convert cosmetic rule based on its type
        switch (rule.type) {
            case index.CosmeticRuleType.ElementHidingRule:
                subconverterResult = elementHiding.ElementHidingRuleConverter.convertToAdg(rule);
                break;
            case index.CosmeticRuleType.ScriptletInjectionRule:
                subconverterResult = scriptlet.ScriptletRuleConverter.convertToAdg(rule);
                break;
            case index.CosmeticRuleType.CssInjectionRule:
                subconverterResult = css.CssInjectionRuleConverter.convertToAdg(rule);
                break;
            case index.CosmeticRuleType.HtmlFilteringRule:
                // Handle special case: uBO response header filtering rule
                // TODO: Optimize double CSS tokenization here
                subconverterResult = headerRemoval.HeaderRemovalRuleConverter.convertToAdg(rule);
                if (subconverterResult.isConverted) {
                    break;
                }
                subconverterResult = html.HtmlRuleConverter.convertToAdg(rule);
                break;
            // Note: Currently, only ADG supports JS injection rules, so we don't need to convert them
            case index.CosmeticRuleType.JsInjectionRule:
                subconverterResult = conversionResult.createNodeConversionResult([rule], false);
                break;
            default:
                throw new ruleConversionError.RuleConversionError('Unsupported cosmetic rule type');
        }
        let convertedModifiers;
        // Convert cosmetic rule modifiers, if any
        if (rule.modifiers) {
            if (rule.syntax === adblockers.AdblockSyntax.Ubo) {
                // uBO doesn't support this rule:
                // example.com##+js(set-constant.js, foo, bar):matches-path(/baz)
                if (rule.type === index.CosmeticRuleType.ScriptletInjectionRule) {
                    throw new ruleConversionError.RuleConversionError('uBO scriptlet injection rules don\'t support cosmetic rule modifiers');
                }
                convertedModifiers = adg.AdgCosmeticRuleModifierConverter.convertFromUbo(rule.modifiers);
            }
            else if (rule.syntax === adblockers.AdblockSyntax.Abp) {
                // TODO: Implement once ABP starts supporting cosmetic rule modifiers
                throw new ruleConversionError.RuleConversionError('ABP don\'t support cosmetic rule modifiers');
            }
        }
        if ((subconverterResult.result.length > 1 || subconverterResult.isConverted)
            || (convertedModifiers && convertedModifiers.isConverted)) {
            // Add modifier list to the subconverter result rules
            subconverterResult.result.forEach((subconverterRule) => {
                if (convertedModifiers && subconverterRule.category === index.RuleCategory.Cosmetic) {
                    // eslint-disable-next-line no-param-reassign
                    subconverterRule.modifiers = convertedModifiers.result;
                }
            });
            return subconverterResult;
        }
        return conversionResult.createNodeConversionResult([rule], false);
    }
    /**
     * Converts a cosmetic rule to uBlock Origin syntax, if possible.
     *
     * @param rule Rule node to convert
     * @returns An object which follows the {@link NodeConversionResult} interface. Its `result` property contains
     * the array of converted rule nodes, and its `isConverted` flag indicates whether the original rule was converted.
     * If the rule was not converted, the result array will contain the original node with the same object reference
     * @throws If the rule is invalid or cannot be converted
     */
    // TODO: Add support for other cosmetic rule types
    static convertToUbo(rule) {
        // Convert cosmetic rule based on its type
        if (rule.type === index.CosmeticRuleType.ScriptletInjectionRule) {
            if (rule.syntax === adblockers.AdblockSyntax.Adg && rule.modifiers?.children.length) {
                // e.g. example.com##+js(set-constant.js, foo, bar):matches-path(/baz)
                throw new ruleConversionError.RuleConversionError('uBO scriptlet injection rules do not support cosmetic rule modifiers');
            }
            return scriptlet.ScriptletRuleConverter.convertToUbo(rule);
        }
        return conversionResult.createNodeConversionResult([rule], false);
    }
}

exports.CosmeticRuleConverter = CosmeticRuleConverter;
