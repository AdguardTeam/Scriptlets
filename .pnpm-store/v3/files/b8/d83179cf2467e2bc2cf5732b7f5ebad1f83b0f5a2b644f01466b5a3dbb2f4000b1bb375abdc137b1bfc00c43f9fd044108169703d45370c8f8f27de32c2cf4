/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
import { AdblockSyntax } from '../../utils/adblockers.mjs';
import { DomainListDeserializer } from '../misc/domain-list-deserializer.mjs';
import { NULL } from '../../utils/constants.mjs';
import { CosmeticRuleType, RuleCategory } from '../../nodes/index.mjs';
import { AbpSnippetInjectionBodyDeserializer } from './scriptlet-body/abp-snippet-injection-body-deserializer.mjs';
import { UboScriptletInjectionBodyDeserializer } from './scriptlet-body/ubo-scriptlet-injection-body-deserializer.mjs';
import { AdgScriptletInjectionBodyDeserializer } from './scriptlet-body/adg-scriptlet-injection-body-deserializer.mjs';
import { ValueDeserializer } from '../misc/value-deserializer.mjs';
import { isUndefined } from '../../utils/type-guards.mjs';
import { BaseDeserializer } from '../base-deserializer.mjs';
import { ElementHidingBodyDeserializer } from './element-hiding-body-deserializer.mjs';
import { CssInjectionBodyDeserializer } from './css-injection-body-deserializer.mjs';
import { ModifierListDeserializer } from '../misc/modifier-list-deserializer.mjs';
import { CosmeticRuleMarshallingMap, COSMETIC_RULE_SEPARATOR_SERIALIZATION_MAP } from '../../marshalling-utils/cosmetic/cosmetic-rule-common.mjs';
import { BinaryTypeMarshallingMap } from '../../marshalling-utils/misc/binary-type-common.mjs';
import { getSyntaxDeserializationMap } from '../syntax-deserialization-map.mjs';

/* eslint-disable no-param-reassign */
/**
 * Value map for binary deserialization. This helps to reduce the size of the serialized data,
 * as it allows us to use a single byte to represent frequently used values.
 */
let cosmeticRuleSeparatorDeserializationMap;
const getCosmeticRuleSeparatorDeserializationMap = () => {
    if (!cosmeticRuleSeparatorDeserializationMap) {
        cosmeticRuleSeparatorDeserializationMap = new Map(Array.from(COSMETIC_RULE_SEPARATOR_SERIALIZATION_MAP).map(([key, value]) => [value, key]));
    }
    return cosmeticRuleSeparatorDeserializationMap;
};
/**
 * Value map for binary deserialization. This helps to reduce the size of the serialized data,
 * as it allows us to use a single byte to represent frequently used values.
 */
const COSMETIC_RULE_TYPE_DESERIALIZATION_MAP = new Map([
    [BinaryTypeMarshallingMap.ElementHidingRule, CosmeticRuleType.ElementHidingRule],
    [BinaryTypeMarshallingMap.CssInjectionRule, CosmeticRuleType.CssInjectionRule],
    [BinaryTypeMarshallingMap.ScriptletInjectionRule, CosmeticRuleType.ScriptletInjectionRule],
    [BinaryTypeMarshallingMap.JsInjectionRule, CosmeticRuleType.JsInjectionRule],
    [BinaryTypeMarshallingMap.HtmlFilteringRule, CosmeticRuleType.HtmlFilteringRule],
]);
class CosmeticRuleDeserializer extends BaseDeserializer {
    /**
     * Deserializes a cosmetic rule node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     */
    static deserialize(buffer, node) {
        const type = COSMETIC_RULE_TYPE_DESERIALIZATION_MAP.get(buffer.readUint8());
        if (isUndefined(type)) {
            throw new Error(`Unknown rule type: ${type}`);
        }
        node.type = type;
        node.category = RuleCategory.Cosmetic;
        const syntax = getSyntaxDeserializationMap().get(buffer.readUint8()) ?? AdblockSyntax.Common;
        node.syntax = syntax;
        node.modifiers = undefined;
        switch (type) {
            case CosmeticRuleType.ElementHidingRule:
                ElementHidingBodyDeserializer.deserializeElementHidingBody(buffer, node.body = {});
                break;
            case CosmeticRuleType.CssInjectionRule:
                CssInjectionBodyDeserializer.deserialize(buffer, node.body = {});
                break;
            case CosmeticRuleType.JsInjectionRule:
                ValueDeserializer.deserialize(buffer, node.body = {});
                break;
            case CosmeticRuleType.HtmlFilteringRule:
                ValueDeserializer.deserialize(buffer, node.body = {});
                break;
            case CosmeticRuleType.ScriptletInjectionRule:
                switch (syntax) {
                    case AdblockSyntax.Adg:
                        AdgScriptletInjectionBodyDeserializer.deserialize(buffer, node.body = {});
                        break;
                    case AdblockSyntax.Abp:
                        AbpSnippetInjectionBodyDeserializer.deserialize(buffer, node.body = {});
                        break;
                    case AdblockSyntax.Ubo:
                        UboScriptletInjectionBodyDeserializer.deserialize(buffer, node.body = {});
                        break;
                    default:
                        throw new Error('Scriptlet rule should have an explicit syntax');
                }
                break;
            default:
                throw new Error('Unknown cosmetic rule type');
        }
        let prop = buffer.readUint8();
        while (prop !== NULL) {
            switch (prop) {
                case CosmeticRuleMarshallingMap.Exception:
                    node.exception = buffer.readUint8() === 1;
                    break;
                case CosmeticRuleMarshallingMap.Separator:
                    ValueDeserializer.deserialize(buffer, node.separator = {}, getCosmeticRuleSeparatorDeserializationMap());
                    break;
                case CosmeticRuleMarshallingMap.Modifiers:
                    node.modifiers = {};
                    ModifierListDeserializer.deserialize(buffer, node.modifiers);
                    break;
                case CosmeticRuleMarshallingMap.Domains:
                    DomainListDeserializer.deserialize(buffer, node.domains = {});
                    break;
                case CosmeticRuleMarshallingMap.Start:
                    node.start = buffer.readUint32();
                    break;
                case CosmeticRuleMarshallingMap.End:
                    node.end = buffer.readUint32();
                    break;
                default:
                    throw new Error(`Unknown property: ${prop}`);
            }
            prop = buffer.readUint8();
        }
    }
}

export { CosmeticRuleDeserializer };
