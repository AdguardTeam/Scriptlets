/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var baseDeserializer = require('../../base-deserializer.js');
var scriptletBodyDeserializer = require('./scriptlet-body-deserializer.js');
var abpSnippetInjectionBodyCommon = require('../../../marshalling-utils/cosmetic/body/abp-snippet-injection-body-common.js');

/**
 * Value map for binary deserialization. This helps to reduce the size of the serialized data,
 * as it allows us to use a single byte to represent frequently used values.
 */
let frequentAbpSnippetArgsDeserializationMap;
const getFrequentAbpSnippetArgsDeserializationMap = () => {
    if (!frequentAbpSnippetArgsDeserializationMap) {
        frequentAbpSnippetArgsDeserializationMap = new Map(Array.from(abpSnippetInjectionBodyCommon.FREQUENT_ABP_SNIPPET_ARGS_SERIALIZATION_MAP).map(([key, value]) => [value, key]));
    }
    return frequentAbpSnippetArgsDeserializationMap;
};
class AbpSnippetInjectionBodyDeserializer extends baseDeserializer.BaseDeserializer {
    /**
     * Deserializes a scriptlet call body node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     * @throws If the binary data is malformed.
     */
    static deserialize(buffer, node) {
        scriptletBodyDeserializer.ScriptletBodyDeserializer.deserialize(buffer, node, getFrequentAbpSnippetArgsDeserializationMap());
    }
}

exports.AbpSnippetInjectionBodyDeserializer = AbpSnippetInjectionBodyDeserializer;
