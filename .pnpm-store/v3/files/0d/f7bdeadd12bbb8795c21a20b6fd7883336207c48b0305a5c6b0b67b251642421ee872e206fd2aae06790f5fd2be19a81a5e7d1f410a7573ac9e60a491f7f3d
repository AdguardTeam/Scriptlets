/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var constants = require('../../utils/constants.js');
var typeGuards = require('../../utils/type-guards.js');
var valueSerializer = require('../misc/value-serializer.js');
var baseSerializer = require('../base-serializer.js');
var modifierListSerializer = require('../misc/modifier-list-serializer.js');
var networkRuleCommon = require('../../marshalling-utils/network/network-rule-common.js');
var binaryTypeCommon = require('../../marshalling-utils/misc/binary-type-common.js');
var syntaxSerializationMap = require('../../marshalling-utils/syntax-serialization-map.js');

/**
 * `NetworkRuleSerializer` is responsible for serializing network rules.
 *
 * @see {@link https://kb.adguard.com/en/general/how-to-create-your-own-ad-filters#basic-rules}
 * @see {@link https://help.eyeo.com/adblockplus/how-to-write-filters#basic}
 */
class NetworkRuleSerializer extends baseSerializer.BaseSerializer {
    /**
     * Serializes a network rule node to binary format.
     *
     * @param node Node to serialize.
     * @param buffer ByteBuffer for writing binary data.
     */
    // TODO: add support for raws, if ever needed
    static serialize(node, buffer) {
        buffer.writeUint8(binaryTypeCommon.BinaryTypeMarshallingMap.NetworkRuleNode);
        buffer.writeUint8(networkRuleCommon.NetworkRuleMarshallingMap.Syntax);
        buffer.writeUint8(syntaxSerializationMap.getSyntaxSerializationMap().get(node.syntax) ?? 0);
        buffer.writeUint8(networkRuleCommon.NetworkRuleMarshallingMap.Exception);
        buffer.writeUint8(node.exception ? 1 : 0);
        buffer.writeUint8(networkRuleCommon.NetworkRuleMarshallingMap.Pattern);
        valueSerializer.ValueSerializer.serialize(node.pattern, buffer);
        if (!typeGuards.isUndefined(node.modifiers)) {
            buffer.writeUint8(networkRuleCommon.NetworkRuleMarshallingMap.ModifierList);
            modifierListSerializer.ModifierListSerializer.serialize(node.modifiers, buffer);
        }
        if (!typeGuards.isUndefined(node.start)) {
            buffer.writeUint8(networkRuleCommon.NetworkRuleMarshallingMap.Start);
            buffer.writeUint32(node.start);
        }
        if (!typeGuards.isUndefined(node.end)) {
            buffer.writeUint8(networkRuleCommon.NetworkRuleMarshallingMap.End);
            buffer.writeUint32(node.end);
        }
        buffer.writeUint8(constants.NULL);
    }
}

exports.NetworkRuleSerializer = NetworkRuleSerializer;
