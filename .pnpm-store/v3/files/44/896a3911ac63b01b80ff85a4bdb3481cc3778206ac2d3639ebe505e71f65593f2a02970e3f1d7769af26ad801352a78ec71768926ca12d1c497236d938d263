/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var constants = require('../../utils/constants.js');
var baseGenerator = require('../base-generator.js');
var adgCssInjectionParser = require('../../parser/css/adg-css-injection-parser.js');

class AdgCssInjectionGenerator extends baseGenerator.BaseGenerator {
    static removeDeclaration = `${adgCssInjectionParser.REMOVE_PROPERTY}${constants.COLON}${constants.SPACE}${adgCssInjectionParser.REMOVE_VALUE}${constants.SEMICOLON}`;
    /**
     * Serializes an AdGuard CSS injection node into a raw string.
     *
     * @param node Node to serialize.
     * @returns Raw string.
     */
    static generate(node) {
        const result = [];
        if (node.mediaQueryList) {
            result.push(constants.CSS_MEDIA_MARKER, constants.SPACE, node.mediaQueryList.value, constants.SPACE, constants.OPEN_CURLY_BRACKET, constants.SPACE);
        }
        result.push(node.selectorList.value, constants.SPACE, constants.OPEN_CURLY_BRACKET, constants.SPACE);
        if (node.remove) {
            result.push(AdgCssInjectionGenerator.removeDeclaration);
        }
        else if (node.declarationList?.value) {
            result.push(node.declarationList.value);
        }
        result.push(constants.SPACE, constants.CLOSE_CURLY_BRACKET);
        if (node.mediaQueryList) {
            result.push(constants.SPACE, constants.CLOSE_CURLY_BRACKET);
        }
        return result.join(constants.EMPTY);
    }
}

exports.AdgCssInjectionGenerator = AdgCssInjectionGenerator;
