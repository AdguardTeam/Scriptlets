/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var constants = require('../../utils/constants.js');
var baseGenerator = require('../base-generator.js');
var valueGenerator = require('../misc/value-generator.js');
var parameterListGenerator = require('../misc/parameter-list-generator.js');
var logicalExpressionGenerator = require('../misc/logical-expression-generator.js');

class PreProcessorCommentGenerator extends baseGenerator.BaseGenerator {
    /**
     * Converts a pre-processor comment node to a string.
     *
     * @param node Pre-processor comment node
     * @returns Raw string
     */
    static generate(node) {
        let result = constants.EMPTY;
        result += constants.PREPROCESSOR_MARKER;
        result += node.name.value;
        if (node.params) {
            // Space is not allowed after "safari_cb_affinity" directive, so we need to handle it separately.
            if (node.name.value !== constants.SAFARI_CB_AFFINITY) {
                result += constants.SPACE;
            }
            if (node.params.type === 'Value') {
                result += valueGenerator.ValueGenerator.generate(node.params);
            }
            else if (node.params.type === 'ParameterList') {
                result += constants.OPEN_PARENTHESIS;
                result += parameterListGenerator.ParameterListGenerator.generate(node.params);
                result += constants.CLOSE_PARENTHESIS;
            }
            else {
                result += logicalExpressionGenerator.LogicalExpressionGenerator.generate(node.params);
            }
        }
        return result;
    }
}

exports.PreProcessorCommentGenerator = PreProcessorCommentGenerator;
