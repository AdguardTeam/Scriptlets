/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
import { AgentCommentDeserializer } from './agent-comment-deserializer.mjs';
import { ConfigCommentDeserializer } from './config-comment-deserializer.mjs';
import { HintCommentDeserializer } from './hint-comment-deserializer.mjs';
import { MetadataCommentDeserializer } from './metadata-comment-deserializer.mjs';
import { PreProcessorCommentDeserializer } from './pre-processor-comment-deserializer.mjs';
import { SimpleCommentDeserializer } from './simple-comment-deserializer.mjs';
import { BaseDeserializer } from '../base-deserializer.mjs';
import { BinaryTypeMarshallingMap } from '../../marshalling-utils/misc/binary-type-common.mjs';

/**
 * `CommentRuleSerializer` is responsible for serializing any comment-like adblock rules.
 *
 * @example
 * Example rules:
 *  - Adblock agent rules:
 *      - ```adblock
 *        [AdGuard]
 *        ```
 *      - ```adblock
 *        [Adblock Plus 2.0]
 *        ```
 *      - etc.
 *  - AdGuard hint rules:
 *      - ```adblock
 *        !+ NOT_OPTIMIZED
 *        ```
 *      - ```adblock
 *        !+ NOT_OPTIMIZED PLATFORM(windows)
 *        ```
 *      - etc.
 *  - Pre-processor rules:
 *      - ```adblock
 *        !#if (adguard)
 *        ```
 *      - ```adblock
 *        !#endif
 *        ```
 *      - etc.
 *  - Metadata rules:
 *      - ```adblock
 *        ! Title: My List
 *        ```
 *      - ```adblock
 *        ! Version: 2.0.150
 *        ```
 *      - etc.
 *  - AGLint inline config rules:
 *      - ```adblock
 *        ! aglint-enable some-rule
 *        ```
 *      - ```adblock
 *        ! aglint-disable some-rule
 *        ```
 *      - etc.
 *  - Simple comments:
 *      - Regular version:
 *        ```adblock
 *        ! This is just a comment
 *        ```
 *      - uBlock Origin / "hostlist" version:
 *        ```adblock
 *        # This is just a comment
 *        ```
 *      - etc.
 */
class CommentRuleDeserializer extends BaseDeserializer {
    /**
     * Deserializes a comment rule node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     * @throws If the binary data is malformed.
     */
    static deserialize(buffer, node) {
        const type = buffer.peekUint8();
        switch (type) {
            case BinaryTypeMarshallingMap.AgentRuleNode:
                AgentCommentDeserializer.deserialize(buffer, node);
                return;
            case BinaryTypeMarshallingMap.HintRuleNode:
                HintCommentDeserializer.deserialize(buffer, node);
                return;
            case BinaryTypeMarshallingMap.PreProcessorCommentRuleNode:
                PreProcessorCommentDeserializer.deserialize(buffer, node);
                return;
            case BinaryTypeMarshallingMap.MetadataCommentRuleNode:
                MetadataCommentDeserializer.deserialize(buffer, node);
                return;
            case BinaryTypeMarshallingMap.ConfigCommentRuleNode:
                ConfigCommentDeserializer.deserialize(buffer, node);
                return;
            case BinaryTypeMarshallingMap.CommentRuleNode:
                SimpleCommentDeserializer.deserialize(buffer, node);
                return;
            default:
                throw new Error(`Unknown comment rule type: ${type}`);
        }
    }
}

export { CommentRuleDeserializer };
