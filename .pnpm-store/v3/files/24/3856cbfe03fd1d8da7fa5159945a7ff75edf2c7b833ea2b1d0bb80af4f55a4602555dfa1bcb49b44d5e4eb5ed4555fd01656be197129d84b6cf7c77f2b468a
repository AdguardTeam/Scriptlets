/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

/**
 * Possible operators in the logical expression.
 */
exports.OperatorValue = void 0;
(function (OperatorValue) {
    OperatorValue["Not"] = "!";
    OperatorValue["And"] = "&&";
    OperatorValue["Or"] = "||";
})(exports.OperatorValue || (exports.OperatorValue = {}));
/**
 * Represents the different comment markers that can be used in an adblock rule.
 *
 * @example
 * - If the rule is `! This is just a comment`, then the marker will be `!`.
 * - If the rule is `# This is just a comment`, then the marker will be `#`.
 */
exports.CommentMarker = void 0;
(function (CommentMarker) {
    /**
     * Regular comment marker. It is supported by all ad blockers.
     */
    CommentMarker["Regular"] = "!";
    /**
     * Hashmark comment marker. It is supported by uBlock Origin and AdGuard,
     * and also used in hosts files.
     */
    CommentMarker["Hashmark"] = "#";
})(exports.CommentMarker || (exports.CommentMarker = {}));
/**
 * Represents the main categories that an adblock rule can belong to.
 * Of course, these include additional subcategories.
 */
exports.RuleCategory = void 0;
(function (RuleCategory) {
    /**
     * Empty "rules" that are only containing whitespaces. These rules are handled just for convenience.
     */
    RuleCategory["Empty"] = "Empty";
    /**
     * Syntactically invalid rules (tolerant mode only).
     */
    RuleCategory["Invalid"] = "Invalid";
    /**
     * Comment rules, such as comment rules, metadata rules, preprocessor rules, etc.
     */
    RuleCategory["Comment"] = "Comment";
    /**
     * Cosmetic rules, such as element hiding rules, CSS rules, scriptlet rules, HTML rules, and JS rules.
     */
    RuleCategory["Cosmetic"] = "Cosmetic";
    /**
     * Network rules, such as basic network rules, header remover network rules, redirect network rules,
     * response header filtering rules, etc.
     */
    RuleCategory["Network"] = "Network";
})(exports.RuleCategory || (exports.RuleCategory = {}));
/**
 * Represents similar types of modifiers values
 * which may be separated by a comma `,` (only for DomainList) or a pipe `|`.
 */
exports.ListNodeType = void 0;
(function (ListNodeType) {
    ListNodeType["Unknown"] = "Unknown";
    ListNodeType["AppList"] = "AppList";
    ListNodeType["DomainList"] = "DomainList";
    ListNodeType["MethodList"] = "MethodList";
    ListNodeType["StealthOptionList"] = "StealthOptionList";
})(exports.ListNodeType || (exports.ListNodeType = {}));
/**
 * Represents child items for {@link ListNodeType}.
 */
exports.ListItemNodeType = void 0;
(function (ListItemNodeType) {
    ListItemNodeType["Unknown"] = "Unknown";
    ListItemNodeType["App"] = "App";
    ListItemNodeType["Domain"] = "Domain";
    ListItemNodeType["Method"] = "Method";
    ListItemNodeType["StealthOption"] = "StealthOption";
})(exports.ListItemNodeType || (exports.ListItemNodeType = {}));
/**
 * Represents possible comment types.
 */
exports.CommentRuleType = void 0;
(function (CommentRuleType) {
    CommentRuleType["AgentCommentRule"] = "AgentCommentRule";
    CommentRuleType["CommentRule"] = "CommentRule";
    CommentRuleType["ConfigCommentRule"] = "ConfigCommentRule";
    CommentRuleType["HintCommentRule"] = "HintCommentRule";
    CommentRuleType["MetadataCommentRule"] = "MetadataCommentRule";
    CommentRuleType["PreProcessorCommentRule"] = "PreProcessorCommentRule";
})(exports.CommentRuleType || (exports.CommentRuleType = {}));
/**
 * Represents possible cosmetic rule types.
 */
exports.CosmeticRuleType = void 0;
(function (CosmeticRuleType) {
    CosmeticRuleType["ElementHidingRule"] = "ElementHidingRule";
    CosmeticRuleType["CssInjectionRule"] = "CssInjectionRule";
    CosmeticRuleType["ScriptletInjectionRule"] = "ScriptletInjectionRule";
    CosmeticRuleType["HtmlFilteringRule"] = "HtmlFilteringRule";
    CosmeticRuleType["JsInjectionRule"] = "JsInjectionRule";
})(exports.CosmeticRuleType || (exports.CosmeticRuleType = {}));
/**
 * Represents possible cosmetic rule separators.
 */
exports.CosmeticRuleSeparator = void 0;
(function (CosmeticRuleSeparator) {
    /**
     * @see {@link https://help.eyeo.com/adblockplus/how-to-write-filters#elemhide_basic}
     */
    CosmeticRuleSeparator["ElementHiding"] = "##";
    /**
     * @see {@link https://help.eyeo.com/adblockplus/how-to-write-filters#elemhide_basic}
     */
    CosmeticRuleSeparator["ElementHidingException"] = "#@#";
    /**
     * @see {@link https://help.eyeo.com/adblockplus/how-to-write-filters#elemhide_basic}
     */
    CosmeticRuleSeparator["ExtendedElementHiding"] = "#?#";
    /**
     * @see {@link https://help.eyeo.com/adblockplus/how-to-write-filters#elemhide_basic}
     */
    CosmeticRuleSeparator["ExtendedElementHidingException"] = "#@?#";
    /**
     * @see {@link https://help.eyeo.com/adblockplus/how-to-write-filters#elemhide_basic}
     */
    CosmeticRuleSeparator["AbpSnippet"] = "#$#";
    /**
     * @see {@link https://help.eyeo.com/adblockplus/how-to-write-filters#elemhide_basic}
     */
    CosmeticRuleSeparator["AbpSnippetException"] = "#@$#";
    /**
     * @see {@link https://kb.adguard.com/en/general/how-to-create-your-own-ad-filters#cosmetic-css-rules}
     */
    CosmeticRuleSeparator["AdgCssInjection"] = "#$#";
    /**
     * @see {@link https://kb.adguard.com/en/general/how-to-create-your-own-ad-filters#cosmetic-css-rules}
     */
    CosmeticRuleSeparator["AdgCssInjectionException"] = "#@$#";
    /**
     * @see {@link https://kb.adguard.com/en/general/how-to-create-your-own-ad-filters#cosmetic-css-rules}
     */
    CosmeticRuleSeparator["AdgExtendedCssInjection"] = "#$?#";
    /**
     * @see {@link https://kb.adguard.com/en/general/how-to-create-your-own-ad-filters#cosmetic-css-rules}
     */
    CosmeticRuleSeparator["AdgExtendedCssInjectionException"] = "#@$?#";
    /**
     * @see {@link https://kb.adguard.com/en/general/how-to-create-your-own-ad-filters#scriptlets}
     */
    CosmeticRuleSeparator["AdgJsInjection"] = "#%#";
    /**
     * @see {@link https://kb.adguard.com/en/general/how-to-create-your-own-ad-filters#scriptlets}
     */
    CosmeticRuleSeparator["AdgJsInjectionException"] = "#@%#";
    /**
     * @see {@link https://kb.adguard.com/en/general/how-to-create-your-own-ad-filters#html-filtering-rules}
     */
    CosmeticRuleSeparator["AdgHtmlFiltering"] = "$$";
    /**
     * @see {@link https://kb.adguard.com/en/general/how-to-create-your-own-ad-filters#html-filtering-rules}
     */
    CosmeticRuleSeparator["AdgHtmlFilteringException"] = "$@$";
})(exports.CosmeticRuleSeparator || (exports.CosmeticRuleSeparator = {}));
/**
 * Represents the different types of network rules.
 */
exports.NetworkRuleType = void 0;
(function (NetworkRuleType) {
    NetworkRuleType["NetworkRule"] = "NetworkRule";
    NetworkRuleType["HostRule"] = "HostRule";
})(exports.NetworkRuleType || (exports.NetworkRuleType = {}));
