/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var index = require('../../nodes/index.js');
var baseGenerator = require('../base-generator.js');
var agentCommentGenerator = require('./agent-comment-generator.js');
var hintCommentGenerator = require('./hint-comment-generator.js');
var preProcessorCommentGenerator = require('./pre-processor-comment-generator.js');
var metadataCommentGenerator = require('./metadata-comment-generator.js');
var configCommentGenerator = require('./config-comment-generator.js');
var simpleCommentGenerator = require('./simple-comment-generator.js');

/* eslint-disable no-param-reassign */
/**
 * `CommentParser` is responsible for parsing any comment-like adblock rules.
 *
 * @example
 * Example rules:
 *  - Adblock agent rules:
 *      - ```adblock
 *        [AdGuard]
 *        ```
 *      - ```adblock
 *        [Adblock Plus 2.0]
 *        ```
 *      - etc.
 *  - AdGuard hint rules:
 *      - ```adblock
 *        !+ NOT_OPTIMIZED
 *        ```
 *      - ```adblock
 *        !+ NOT_OPTIMIZED PLATFORM(windows)
 *        ```
 *      - etc.
 *  - Pre-processor rules:
 *      - ```adblock
 *        !#if (adguard)
 *        ```
 *      - ```adblock
 *        !#endif
 *        ```
 *      - etc.
 *  - Metadata rules:
 *      - ```adblock
 *        ! Title: My List
 *        ```
 *      - ```adblock
 *        ! Version: 2.0.150
 *        ```
 *      - etc.
 *  - AGLint inline config rules:
 *      - ```adblock
 *        ! aglint-enable some-rule
 *        ```
 *      - ```adblock
 *        ! aglint-disable some-rule
 *        ```
 *      - etc.
 *  - Simple comments:
 *      - Regular version:
 *        ```adblock
 *        ! This is just a comment
 *        ```
 *      - uBlock Origin / "hostlist" version:
 *        ```adblock
 *        # This is just a comment
 *        ```
 *      - etc.
 */
class CommentRuleGenerator extends baseGenerator.BaseGenerator {
    /**
     * Converts a comment rule node to a string.
     *
     * @param node Comment rule node
     * @returns Raw string
     */
    static generate(node) {
        switch (node.type) {
            case index.CommentRuleType.AgentCommentRule:
                return agentCommentGenerator.AgentCommentGenerator.generate(node);
            case index.CommentRuleType.HintCommentRule:
                return hintCommentGenerator.HintCommentGenerator.generate(node);
            case index.CommentRuleType.PreProcessorCommentRule:
                return preProcessorCommentGenerator.PreProcessorCommentGenerator.generate(node);
            case index.CommentRuleType.MetadataCommentRule:
                return metadataCommentGenerator.MetadataCommentGenerator.generate(node);
            case index.CommentRuleType.ConfigCommentRule:
                return configCommentGenerator.ConfigCommentGenerator.generate(node);
            case index.CommentRuleType.CommentRule:
                return simpleCommentGenerator.SimpleCommentGenerator.generate(node);
            default:
                throw new Error('Unknown comment rule type');
        }
    }
}

exports.CommentRuleGenerator = CommentRuleGenerator;
