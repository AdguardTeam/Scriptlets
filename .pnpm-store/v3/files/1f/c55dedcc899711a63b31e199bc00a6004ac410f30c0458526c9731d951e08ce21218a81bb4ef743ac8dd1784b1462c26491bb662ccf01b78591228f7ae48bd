/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var constants = require('../../../utils/constants.js');
var parameterListSerializer = require('../../misc/parameter-list-serializer.js');
var typeGuards = require('../../../utils/type-guards.js');
var baseSerializer = require('../../base-serializer.js');
var abpSnippetInjectionBodyCommon = require('../../../marshalling-utils/cosmetic/body/abp-snippet-injection-body-common.js');
var binaryTypeCommon = require('../../../marshalling-utils/misc/binary-type-common.js');

class ScriptletBodySerializer extends baseSerializer.BaseSerializer {
    /**
     * Serializes a hint rule node to binary format.
     *
     * @param node Node to serialize.
     * @param buffer ByteBuffer for writing binary data.
     * @param frequentScriptletArgs Map of frequently used scriptlet names / arguments
     * and their serialization index (optional).
     */
    static serialize = (node, buffer, frequentScriptletArgs) => {
        buffer.writeUint8(binaryTypeCommon.BinaryTypeMarshallingMap.ScriptletInjectionRuleBodyNode);
        const { length } = node.children;
        buffer.writeUint8(abpSnippetInjectionBodyCommon.AbpSnippetBodyMarshallingMap.Children);
        // note: we store the count, because re-construction of the array is faster if we know the length
        if (length > constants.UINT8_MAX) {
            throw new Error(`Too many scriptlet children: ${length}, the limit is ${constants.UINT8_MAX}`);
        }
        buffer.writeUint8(length);
        for (let i = 0; i < length; i += 1) {
            parameterListSerializer.ParameterListSerializer.serialize(node.children[i], buffer, frequentScriptletArgs);
        }
        if (!typeGuards.isUndefined(node.start)) {
            buffer.writeUint8(abpSnippetInjectionBodyCommon.AbpSnippetBodyMarshallingMap.Start);
            buffer.writeUint32(node.start);
        }
        if (!typeGuards.isUndefined(node.end)) {
            buffer.writeUint8(abpSnippetInjectionBodyCommon.AbpSnippetBodyMarshallingMap.End);
            buffer.writeUint32(node.end);
        }
        buffer.writeUint8(constants.NULL);
    };
}

exports.ScriptletBodySerializer = ScriptletBodySerializer;
