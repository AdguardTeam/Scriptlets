/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var constants = require('../../../utils/constants.js');
var parameterListDeserializer = require('../../misc/parameter-list-deserializer.js');
var baseDeserializer = require('../../base-deserializer.js');
var abpSnippetInjectionBodyCommon = require('../../../marshalling-utils/cosmetic/body/abp-snippet-injection-body-common.js');
var binaryTypeCommon = require('../../../marshalling-utils/misc/binary-type-common.js');

class ScriptletBodyDeserializer extends baseDeserializer.BaseDeserializer {
    /**
     * Deserializes a hint rule node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     * @param frequentScriptletArgs Map of frequently used scriptlet names / arguments
     * and their serialization index (optional).
     * @throws If the binary data is malformed.
     */
    static deserialize = (buffer, node, frequentScriptletArgs) => {
        buffer.assertUint8(binaryTypeCommon.BinaryTypeMarshallingMap.ScriptletInjectionRuleBodyNode);
        node.type = 'ScriptletInjectionRuleBody';
        let prop = buffer.readUint8();
        while (prop !== constants.NULL) {
            switch (prop) {
                case abpSnippetInjectionBodyCommon.AbpSnippetBodyMarshallingMap.Children:
                    node.children = new Array(buffer.readUint8());
                    // read children
                    for (let i = 0; i < node.children.length; i += 1) {
                        parameterListDeserializer.ParameterListDeserializer.deserialize(buffer, node.children[i] = {}, frequentScriptletArgs);
                    }
                    break;
                case abpSnippetInjectionBodyCommon.AbpSnippetBodyMarshallingMap.Start:
                    node.start = buffer.readUint32();
                    break;
                case abpSnippetInjectionBodyCommon.AbpSnippetBodyMarshallingMap.End:
                    node.end = buffer.readUint32();
                    break;
                default:
                    throw new Error(`Invalid property: ${prop}`);
            }
            prop = buffer.readUint8();
        }
    };
}

exports.ScriptletBodyDeserializer = ScriptletBodyDeserializer;
