/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var constants = require('../../utils/constants.js');
var valueSerializer = require('../misc/value-serializer.js');
var typeGuards = require('../../utils/type-guards.js');
var hostnameListSerializer = require('./hostname-list-serializer.js');
var baseSerializer = require('../base-serializer.js');
var hostRuleCommon = require('../../marshalling-utils/misc/host-rule-common.js');
var binaryTypeCommon = require('../../marshalling-utils/misc/binary-type-common.js');
var syntaxSerializationMap = require('../../marshalling-utils/syntax-serialization-map.js');

/**
 * `HostRuleSerializer` is responsible for serializing hosts-like rules.
 *
 * HostRule is a structure for simple host-level rules (i.e. /etc/hosts syntax).
 * It also supports "just domain" syntax. In this case, the IP will be set to 0.0.0.0.
 *
 * Rules syntax looks like this:
 * ```text
 * IP_address canonical_hostname [aliases...]
 * ```
 *
 * @example
 * `192.168.1.13 bar.mydomain.org bar` -- ipv4
 * `ff02::1 ip6-allnodes` -- ipv6
 * `::1 localhost ip6-localhost ip6-loopback` -- ipv6 aliases
 * `example.org` -- "just domain" syntax
 * @see {@link http://man7.org/linux/man-pages/man5/hosts.5.html}
 */
class HostRuleSerializer extends baseSerializer.BaseSerializer {
    /**
     * Serializes a host rule node to binary format.
     *
     * @param node Node to serialize.
     * @param buffer ByteBuffer for writing binary data.
     */
    // TODO: add support for raws, if ever needed
    static serialize(node, buffer) {
        buffer.writeUint8(binaryTypeCommon.BinaryTypeMarshallingMap.HostRuleNode);
        buffer.writeUint8(hostRuleCommon.HostRuleMarshallingMap.Syntax);
        buffer.writeUint8(syntaxSerializationMap.getSyntaxSerializationMap().get(node.syntax) ?? 0);
        if (node.ip) {
            buffer.writeUint8(hostRuleCommon.HostRuleMarshallingMap.Ip);
            valueSerializer.ValueSerializer.serialize(node.ip, buffer);
        }
        if (node.hostnames) {
            buffer.writeUint8(hostRuleCommon.HostRuleMarshallingMap.HostnameList);
            hostnameListSerializer.HostnameListSerializer.serialize(node.hostnames, buffer);
        }
        if (node.comment) {
            buffer.writeUint8(hostRuleCommon.HostRuleMarshallingMap.Comment);
            valueSerializer.ValueSerializer.serialize(node.comment, buffer);
        }
        if (!typeGuards.isUndefined(node.start)) {
            buffer.writeUint8(hostRuleCommon.HostRuleMarshallingMap.Start);
            buffer.writeUint32(node.start);
        }
        if (!typeGuards.isUndefined(node.end)) {
            buffer.writeUint8(hostRuleCommon.HostRuleMarshallingMap.End);
            buffer.writeUint32(node.end);
        }
        buffer.writeUint8(constants.NULL);
    }
}

exports.HostRuleSerializer = HostRuleSerializer;
