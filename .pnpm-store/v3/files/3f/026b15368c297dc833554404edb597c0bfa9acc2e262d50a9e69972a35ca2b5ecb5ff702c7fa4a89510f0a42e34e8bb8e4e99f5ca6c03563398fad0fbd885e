/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var logicalExpressionCommon = require('../../marshalling-utils/misc/logical-expression-common.js');
var logicalExpressionSerializer = require('../../serializer/misc/logical-expression-serializer.js');
var constants = require('../../utils/constants.js');
var typeGuards = require('../../utils/type-guards.js');
var baseDeserializer = require('../base-deserializer.js');
var binaryTypeCommon = require('../../marshalling-utils/misc/binary-type-common.js');

let logicalExpressionOperatorMarshallingMapReverse;
const getOperatorBinaryMapReverse = () => {
    if (!logicalExpressionOperatorMarshallingMapReverse) {
        logicalExpressionOperatorMarshallingMapReverse = new Map(Array.from(logicalExpressionCommon.LOGICAL_EXPRESSION_OPERATOR_SERIALISATION_MAP).map(([key, value]) => [value, key]));
    }
    return logicalExpressionOperatorMarshallingMapReverse;
};
/**
 * Gets the string representation of the operator from the binary representation.
 *
 * @param binary Binary representation of the operator
 * @returns String representation of the operator
 * @throws If the operator is unknown
 */
const getOperatorOrFail = (binary) => {
    const operator = getOperatorBinaryMapReverse().get(binary);
    if (typeGuards.isUndefined(operator)) {
        throw new Error(`Unknown operator: ${binary}`);
    }
    return operator;
};
/**
 * Deserialization map for known variables.
 */
let knownVariablesMapReverse;
const getKnownVariablesMapReverse = () => {
    if (!knownVariablesMapReverse) {
        knownVariablesMapReverse = new Map(Array.from(logicalExpressionCommon.KNOWN_VARIABLES_SERIALIZATION_MAP).map(([key, value]) => [value, key]));
    }
    return knownVariablesMapReverse;
};
/**
 * Gets the frequent name of the variable from the binary representation.
 *
 * @param binary Binary representation of the variable
 * @returns Frequent name of the variable
 * @throws If the variable is unknown
 */
const getFrequentNameOrFail = (binary) => {
    const name = getKnownVariablesMapReverse().get(binary);
    if (typeGuards.isUndefined(name)) {
        throw new Error(`Unknown frequent name: ${binary}`);
    }
    return name;
};
/**
 * `LogicalExpressionDeserializer` is responsible for deserializing logical expressions.
 *
 * @example
 * From the following rule:
 * ```adblock
 * !#if (adguard_ext_android_cb || adguard_ext_safari)
 * ```
 * this parser will parse the expression `(adguard_ext_android_cb || adguard_ext_safari)`.
 */
// TODO: Refactor this class
class LogicalExpressionDeserializer extends baseDeserializer.BaseDeserializer {
    /**
     * Deserializes a variable node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     * @throws If the binary data is malformed.
     */
    static deserializeVariableNode(buffer, node) {
        buffer.assertUint8(binaryTypeCommon.BinaryTypeMarshallingMap.ExpressionVariableNode);
        node.type = logicalExpressionSerializer.NodeType.Variable;
        let prop = buffer.readUint8();
        while (prop !== constants.NULL) {
            switch (prop) {
                case logicalExpressionCommon.VariableNodeBinaryPropMarshallingMap.Name:
                    node.name = buffer.readString();
                    break;
                case logicalExpressionCommon.VariableNodeBinaryPropMarshallingMap.FrequentName:
                    node.name = getFrequentNameOrFail(buffer.readUint8());
                    break;
                case logicalExpressionCommon.VariableNodeBinaryPropMarshallingMap.Start:
                    node.start = buffer.readUint32();
                    break;
                case logicalExpressionCommon.VariableNodeBinaryPropMarshallingMap.End:
                    node.end = buffer.readUint32();
                    break;
                default:
                    throw new Error(`Invalid property: ${prop}`);
            }
            prop = buffer.readUint8();
        }
    }
    /**
     * Deserializes a parenthesis node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     * @throws If the binary data is malformed.
     */
    static deserializeParenthesisNode(buffer, node) {
        buffer.assertUint8(binaryTypeCommon.BinaryTypeMarshallingMap.ExpressionParenthesisNode);
        node.type = logicalExpressionSerializer.NodeType.Parenthesis;
        let prop = buffer.readUint8();
        while (prop !== constants.NULL) {
            switch (prop) {
                case logicalExpressionCommon.ParenthesisNodeBinaryPropMarshallingMap.Expression:
                    LogicalExpressionDeserializer.deserialize(buffer, node.expression = {});
                    break;
                case logicalExpressionCommon.ParenthesisNodeBinaryPropMarshallingMap.Start:
                    node.start = buffer.readUint32();
                    break;
                case logicalExpressionCommon.ParenthesisNodeBinaryPropMarshallingMap.End:
                    node.end = buffer.readUint32();
                    break;
                default:
                    throw new Error(`Invalid property: ${prop}`);
            }
            prop = buffer.readUint8();
        }
    }
    /**
     * Deserializes an operator node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     * @throws If the binary data is malformed.
     */
    static deserializeOperatorNode(buffer, node) {
        buffer.assertUint8(binaryTypeCommon.BinaryTypeMarshallingMap.ExpressionOperatorNode);
        node.type = logicalExpressionSerializer.NodeType.Operator;
        let prop = buffer.readUint8();
        while (prop !== constants.NULL) {
            switch (prop) {
                case logicalExpressionCommon.OperatorNodeBinaryPropMarshallingMap.Operator:
                    node.operator = getOperatorOrFail(buffer.readUint8());
                    break;
                case logicalExpressionCommon.OperatorNodeBinaryPropMarshallingMap.Left:
                    LogicalExpressionDeserializer.deserialize(buffer, node.left = {});
                    break;
                case logicalExpressionCommon.OperatorNodeBinaryPropMarshallingMap.Right:
                    LogicalExpressionDeserializer.deserialize(buffer, node.right = {});
                    break;
                case logicalExpressionCommon.OperatorNodeBinaryPropMarshallingMap.Start:
                    node.start = buffer.readUint32();
                    break;
                case logicalExpressionCommon.OperatorNodeBinaryPropMarshallingMap.End:
                    node.end = buffer.readUint32();
                    break;
                default:
                    throw new Error(`Invalid property: ${prop}`);
            }
            prop = buffer.readUint8();
        }
    }
    /**
     * Deserializes a logical expression node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     * @throws If the binary data is malformed.
     */
    static deserialize(buffer, node) {
        // note: we just do a simple lookahead here, because advancing the buffer is done in the
        // 'sub-deserialize' methods
        let type = buffer.peekUint8();
        while (type !== constants.NULL) {
            switch (type) {
                case binaryTypeCommon.BinaryTypeMarshallingMap.ExpressionVariableNode:
                    LogicalExpressionDeserializer.deserializeVariableNode(buffer, node);
                    break;
                case binaryTypeCommon.BinaryTypeMarshallingMap.ExpressionOperatorNode:
                    LogicalExpressionDeserializer.deserializeOperatorNode(buffer, node);
                    break;
                case binaryTypeCommon.BinaryTypeMarshallingMap.ExpressionParenthesisNode:
                    LogicalExpressionDeserializer.deserializeParenthesisNode(buffer, node);
                    break;
                default:
                    throw new Error(`Unexpected node type: ${type}`);
            }
            type = buffer.peekUint8();
        }
        // consume NULL
        buffer.readUint8();
    }
}

exports.LogicalExpressionDeserializer = LogicalExpressionDeserializer;
exports.getFrequentNameOrFail = getFrequentNameOrFail;
