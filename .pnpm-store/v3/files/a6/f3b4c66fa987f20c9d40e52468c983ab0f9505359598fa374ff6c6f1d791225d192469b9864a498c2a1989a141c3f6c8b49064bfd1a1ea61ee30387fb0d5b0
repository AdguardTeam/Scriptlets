/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var constants = require('../../utils/constants.js');
var valueDeserializer = require('./value-deserializer.js');
var baseDeserializer = require('../base-deserializer.js');
var modifierCommon = require('../../marshalling-utils/misc/modifier-common.js');
var binaryTypeCommon = require('../../marshalling-utils/misc/binary-type-common.js');

/* eslint-disable no-param-reassign */
/**
 * Value map for binary deserialization. This helps to reduce the size of the serialized data,
 * as it allows us to use a single byte to represent frequently used values.
 *
 * @note Only 256 values can be represented this way.
 */
let frequentModifiersDeserializationMap;
const getFrequentModifiersDeserializationMap = () => {
    if (!frequentModifiersDeserializationMap) {
        frequentModifiersDeserializationMap = new Map(Array.from(modifierCommon.FREQUENT_MODIFIERS_SERIALIZATION_MAP).map(([key, value]) => [value, key]));
    }
    return frequentModifiersDeserializationMap;
};
/**
 * Value map for binary deserialization. This helps to reduce the size of the serialized data,
 * as it allows us to use a single byte to represent frequently used values.
 */
let frequentValuesDeserializationMaps;
const getFrequentValuesDeserializationMaps = () => {
    if (!frequentValuesDeserializationMaps) {
        frequentValuesDeserializationMaps = new Map(Array.from(modifierCommon.FREQUENT_REDIRECT_MODIFIERS_SERIALIZATION_MAP, ([modifier, valueMap]) => [modifier, new Map(Array.from(valueMap, ([key, value]) => [value, key]))]));
    }
    return frequentValuesDeserializationMaps;
};
/**
 * `ModifierSerializer` is responsible for serializing modifiers.
 *
 * @example
 * `match-case`, `~third-party`, `domain=example.com|~example.org`
 */
class ModifierDeserializer extends baseDeserializer.BaseDeserializer {
    /**
     * Deserializes a modifier node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     */
    static deserialize(buffer, node) {
        buffer.assertUint8(binaryTypeCommon.BinaryTypeMarshallingMap.ModifierNode);
        node.type = 'Modifier';
        let prop = buffer.readUint8();
        while (prop !== constants.NULL) {
            switch (prop) {
                case modifierCommon.ModifierNodeMarshallingMap.Name:
                    // eslint-disable-next-line max-len
                    valueDeserializer.ValueDeserializer.deserialize(buffer, node.name = {}, getFrequentModifiersDeserializationMap());
                    break;
                case modifierCommon.ModifierNodeMarshallingMap.Value:
                    if (node.name) {
                        // eslint-disable-next-line max-len
                        valueDeserializer.ValueDeserializer.deserialize(buffer, node.value = {}, getFrequentValuesDeserializationMaps().get(node.name.value));
                    }
                    else {
                        valueDeserializer.ValueDeserializer.deserialize(buffer, node.value = {});
                    }
                    break;
                case modifierCommon.ModifierNodeMarshallingMap.Exception:
                    node.exception = buffer.readUint8() === 1;
                    break;
                case modifierCommon.ModifierNodeMarshallingMap.Start:
                    node.start = buffer.readUint32();
                    break;
                case modifierCommon.ModifierNodeMarshallingMap.End:
                    node.end = buffer.readUint32();
                    break;
                default:
                    throw new Error(`Invalid property: ${prop}.`);
            }
            prop = buffer.readUint8();
        }
    }
}

exports.ModifierDeserializer = ModifierDeserializer;
