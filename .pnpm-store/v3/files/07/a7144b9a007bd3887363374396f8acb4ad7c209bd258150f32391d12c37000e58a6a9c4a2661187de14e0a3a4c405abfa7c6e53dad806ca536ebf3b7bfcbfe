/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var constants = require('../../utils/constants.js');
var index = require('../../nodes/index.js');
var baseDeserializer = require('../base-deserializer.js');
var metadataCommentCommon = require('../../marshalling-utils/comment/metadata-comment-common.js');
var adblockers = require('../../utils/adblockers.js');
var valueDeserializer = require('../misc/value-deserializer.js');
var binaryTypeCommon = require('../../marshalling-utils/misc/binary-type-common.js');

/* eslint-disable no-param-reassign */
/**
 * `MetadataCommentDeserializer` is responsible for deserializing metadata comments.
 * Metadata comments are special comments that specify some properties of the list.
 *
 * @example
 * For example, in the case of
 * ```adblock
 * ! Title: My List
 * ```
 * the name of the header is `Title`, and the value is `My List`, which means that
 * the list title is `My List`, and it can be used in the adblocker UI.
 * @see {@link https://help.eyeo.com/adblockplus/how-to-write-filters#special-comments}
 */
class MetadataCommentDeserializer extends baseDeserializer.BaseDeserializer {
    /**
     * Deserializes a metadata comment node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     * @throws If the binary data is malformed.
     */
    static deserialize(buffer, node) {
        buffer.assertUint8(binaryTypeCommon.BinaryTypeMarshallingMap.MetadataCommentRuleNode);
        node.type = index.CommentRuleType.MetadataCommentRule;
        node.category = index.RuleCategory.Comment;
        node.syntax = adblockers.AdblockSyntax.Common;
        let prop = buffer.readUint8();
        while (prop !== constants.NULL) {
            switch (prop) {
                case metadataCommentCommon.MetadataCommentMarshallingMap.Marker:
                    valueDeserializer.ValueDeserializer.deserialize(buffer, node.marker = {});
                    break;
                case metadataCommentCommon.MetadataCommentMarshallingMap.Header:
                    // eslint-disable-next-line max-len
                    valueDeserializer.ValueDeserializer.deserialize(buffer, node.header = {}, metadataCommentCommon.FREQUENT_HEADERS_DESERIALIZATION_MAP);
                    break;
                case metadataCommentCommon.MetadataCommentMarshallingMap.Value:
                    valueDeserializer.ValueDeserializer.deserialize(buffer, node.value = {});
                    break;
                case metadataCommentCommon.MetadataCommentMarshallingMap.Start:
                    node.start = buffer.readUint32();
                    break;
                case metadataCommentCommon.MetadataCommentMarshallingMap.End:
                    node.end = buffer.readUint32();
                    break;
                default:
                    throw new Error(`Invalid property: ${prop}`);
            }
            prop = buffer.readUint8();
        }
    }
}

exports.MetadataCommentDeserializer = MetadataCommentDeserializer;
