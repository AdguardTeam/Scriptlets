/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var baseDeserializer = require('./base-deserializer.js');
var constants = require('../utils/constants.js');
var invalidRuleErrorNodeCommon = require('../marshalling-utils/invalid-rule-error-node-common.js');
var binaryTypeCommon = require('../marshalling-utils/misc/binary-type-common.js');

/* eslint-disable no-param-reassign */
class InvalidRuleErrorNodeDeserializer extends baseDeserializer.BaseDeserializer {
    /**
     * Deserializes an invalid rule error node from binary format.
     *
     * @param buffer ByteBuffer for reading binary data.
     * @param node Destination node.
     */
    static deserialize(buffer, node) {
        buffer.assertUint8(binaryTypeCommon.BinaryTypeMarshallingMap.InvalidRuleErrorNode);
        node.type = 'InvalidRuleError';
        let prop = buffer.readUint8();
        while (prop !== constants.NULL) {
            switch (prop) {
                case invalidRuleErrorNodeCommon.InvalidRuleErrorNodeMarshallingMap.Name:
                    node.name = buffer.readString();
                    break;
                case invalidRuleErrorNodeCommon.InvalidRuleErrorNodeMarshallingMap.Message:
                    node.message = buffer.readString();
                    break;
                case invalidRuleErrorNodeCommon.InvalidRuleErrorNodeMarshallingMap.Start:
                    node.start = buffer.readUint32();
                    break;
                case invalidRuleErrorNodeCommon.InvalidRuleErrorNodeMarshallingMap.End:
                    node.end = buffer.readUint32();
                    break;
                default:
                    throw new Error(`Invalid property: ${prop}.`);
            }
            prop = buffer.readUint8();
        }
    }
}

exports.InvalidRuleErrorNodeDeserializer = InvalidRuleErrorNodeDeserializer;
