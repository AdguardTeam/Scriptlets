/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var constants = require('../../utils/constants.js');
var index = require('../../nodes/index.js');
var options = require('../options.js');
var baseParser = require('../base-parser.js');
var listItemsParser = require('./list-items-parser.js');

/**
 * `DomainListParser` is responsible for parsing a domain list.
 *
 * @example
 * - If the rule is `example.com,~example.net##.ads`, the domain list is `example.com,~example.net`.
 * - If the rule is `ads.js^$script,domains=example.com|~example.org`, the domain list is `example.com|~example.org`.
 * This parser is responsible for parsing these domain lists.
 * @see {@link https://help.eyeo.com/adblockplus/how-to-write-filters#elemhide_domains}
 */
class DomainListParser extends baseParser.BaseParser {
    /**
     * Parses a domain list, eg. `example.com,example.org,~example.org`
     *
     * @param raw Raw input to parse.
     * @param options Global parser options.
     * @param baseOffset Starting offset of the input. Node locations are calculated relative to this offset.
     * @param separator Separator character (default: comma)
     *
     * @returns Domain list AST.
     * @throws An {@link AdblockSyntaxError} if the domain list is syntactically invalid.
     * @throws An {@link Error} if the options are invalid.
     */
    static parse(raw, options$1 = options.defaultParserOptions, baseOffset = 0, separator = constants.COMMA) {
        if (separator !== constants.COMMA && separator !== constants.PIPE) {
            throw new Error(`Invalid separator: ${separator}`);
        }
        const result = {
            type: index.ListNodeType.DomainList,
            separator,
            children: listItemsParser.ListItemsParser.parse(raw, options$1, baseOffset, separator, index.ListItemNodeType.Domain),
        };
        if (options$1.isLocIncluded) {
            result.start = baseOffset;
            result.end = baseOffset + raw.length;
        }
        return result;
    }
}

exports.DomainListParser = DomainListParser;
