/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var constants = require('../../utils/constants.js');
var logicalExpressionSerializer = require('../misc/logical-expression-serializer.js');
var parameterListSerializer = require('../misc/parameter-list-serializer.js');
var valueSerializer = require('../misc/value-serializer.js');
var typeGuards = require('../../utils/type-guards.js');
var baseSerializer = require('../base-serializer.js');
var preProcessorCommentCommon = require('../../marshalling-utils/comment/pre-processor-comment-common.js');
var binaryTypeCommon = require('../../marshalling-utils/misc/binary-type-common.js');
var syntaxSerializationMap = require('../../marshalling-utils/syntax-serialization-map.js');

/**
 * `PreProcessorSerializer` is responsible for serializing preprocessor rules.
 * Pre-processor comments are special comments that are used to control the behavior of the filter list processor.
 * Please note that this parser only handles general syntax for now, and does not validate the parameters at
 * the parsing stage.
 *
 * @example
 * If your rule is
 * ```adblock
 * !#if (adguard)
 * ```
 * then the directive's name is `if` and its value is `(adguard)`, but the parameter list
 * is not parsed / validated further.
 * @see {@link https://kb.adguard.com/en/general/how-to-create-your-own-ad-filters#pre-processor-directives}
 * @see {@link https://github.com/gorhill/uBlock/wiki/Static-filter-syntax#pre-parsing-directives}
 */
class PreProcessorCommentSerializer extends baseSerializer.BaseSerializer {
    /**
     * Serializes a pre-processor comment node to binary format.
     *
     * @param node Node to serialize.
     * @param buffer ByteBuffer for writing binary data.
     */
    // TODO: add support for raws, if ever needed
    static serialize(node, buffer) {
        buffer.writeUint8(binaryTypeCommon.BinaryTypeMarshallingMap.PreProcessorCommentRuleNode);
        buffer.writeUint8(preProcessorCommentCommon.PreProcessorRuleMarshallingMap.Name);
        valueSerializer.ValueSerializer.serialize(node.name, buffer, preProcessorCommentCommon.FREQUENT_DIRECTIVES_SERIALIZATION_MAP);
        buffer.writeUint8(preProcessorCommentCommon.PreProcessorRuleMarshallingMap.Syntax);
        buffer.writeUint8(syntaxSerializationMap.getSyntaxSerializationMap().get(node.syntax) ?? 0);
        if (!typeGuards.isUndefined(node.params)) {
            buffer.writeUint8(preProcessorCommentCommon.PreProcessorRuleMarshallingMap.Params);
            if (node.params.type === 'Value') {
                valueSerializer.ValueSerializer.serialize(node.params, buffer);
            }
            else if (node.params.type === 'ParameterList') {
                parameterListSerializer.ParameterListSerializer.serialize(node.params, buffer, preProcessorCommentCommon.FREQUENT_PARAMS_SERIALIZATION_MAP, true);
            }
            else {
                logicalExpressionSerializer.LogicalExpressionSerializer.serialize(node.params, buffer);
            }
        }
        if (!typeGuards.isUndefined(node.start)) {
            buffer.writeUint8(preProcessorCommentCommon.PreProcessorRuleMarshallingMap.Start);
            buffer.writeUint32(node.start);
        }
        if (!typeGuards.isUndefined(node.end)) {
            buffer.writeUint8(preProcessorCommentCommon.PreProcessorRuleMarshallingMap.End);
            buffer.writeUint32(node.end);
        }
        buffer.writeUint8(constants.NULL);
    }
}

exports.PreProcessorCommentSerializer = PreProcessorCommentSerializer;
