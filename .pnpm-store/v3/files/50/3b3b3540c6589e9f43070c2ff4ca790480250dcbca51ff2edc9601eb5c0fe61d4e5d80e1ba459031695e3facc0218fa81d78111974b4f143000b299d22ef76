import { BaseConverter } from '../base-interfaces/base-converter';
import { type ConversionResult } from '../base-interfaces/conversion-result';
import { CssTokenStream } from '../../parser/css/css-token-stream';
export declare const ERROR_MESSAGES: {
    INVALID_ATTRIBUTE_VALUE: string;
};
/**
 * CSS selector converter
 *
 * @todo Implement `convertToUbo` and `convertToAbp`
 */
export declare class CssSelectorConverter extends BaseConverter {
    /**
     * Converts Extended CSS elements to AdGuard-compatible ones
     *
     * @param selectorList Selector list to convert
     * @returns An object which follows the {@link ConversionResult} interface. Its `result` property contains
     * the converted node, and its `isConverted` flag indicates whether the original node was converted.
     * If the node was not converted, the result will contain the original node with the same object reference
     * @throws If the rule is invalid or incompatible
     */
    static convertToAdg(selectorList: string | CssTokenStream): ConversionResult<string>;
}
