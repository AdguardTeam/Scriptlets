/**
 * @file Provides platform mapping and helper functions.
 */
import { GenericPlatform, SpecificPlatform } from '../platforms';
/**
 * Map of specific platforms string names to their corresponding enum values.
 */
export declare const SPECIFIC_PLATFORM_MAP: Map<string, SpecificPlatform>;
/**
 * Map of specific platforms enum values to their corresponding string names.
 *
 * @note Reverse of {@link SPECIFIC_PLATFORM_MAP}.
 */
export declare const SPECIFIC_PLATFORM_MAP_REVERSE: Map<SpecificPlatform, string>;
/**
 * Map of generic platforms string names to their corresponding enum values.
 */
export declare const GENERIC_PLATFORM_MAP: Map<string, GenericPlatform>;
/**
 * Check if the platform is a generic platform.
 *
 * @param platform Platform to check.
 *
 * @returns True if the platform is a generic platform, false otherwise.
 */
export declare const isGenericPlatform: (platform: number) => boolean;
/**
 * Returns the platform enum value for the given platform string name.
 *
 * @param platform Platform string name, e.g., 'adg_os_windows'.
 *
 * @returns Specific or generic platform enum value.
 * @throws Error if the platform is unknown.
 */
export declare const getPlatformId: (platform: string) => SpecificPlatform | GenericPlatform;
/**
 * Returns the specific platform string name for the given platform enum value.
 *
 * @param platform Specific platform enum value.
 *
 * @returns Specific platform string name, e.g., 'adg_os_windows'.
 * @throws Error if the platform is unknown.
 */
export declare const getSpecificPlatformName: (platform: SpecificPlatform) => string;
