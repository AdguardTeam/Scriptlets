{"version":3,"file":"getJsdocProcessorPlugin.cjs","names":["_nodeFs","require","_nodePath","_nodeUrl","espree","_interopRequireWildcard","_jsdocUtils","_jsdoccomment","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","__dirname","dirname","fileURLToPath","pathToFileURL","__filename","toString","version","JSON","parse","readFileSync","join","likelyNestedJSDocIndentSpace","preTagSpaceLength","firstLinePrefixLength","hasCaptionRegex","escapeStringRegexp","str","replaceAll","countChars","ch","match","RegExp","length","getLinesCols","text","matchLines","colDelta","slice","lastIndexOf","getJsdocProcessorPlugin","options","exampleCodeRegex","rejectExampleCodeRegex","checkExamples","checkDefaults","checkParams","checkProperties","matchingFileName","matchingFileNameDefaults","matchingFileNameParams","matchingFileNameProperties","paddedIndent","captionRequired","sourceType","parser","undefined","exampleCodeRegExp","rejectExampleCodeRegExp","getRegexFromString","otherInfo","extraMessages","getTextsAndFileNames","jsdoc","jsFileName","commentLineCols","textsAndFileNames","checkSource","filename","ext","defaultFileName","lines","cols","skipInit","source","targetTagName","sources","tag","line","push","nonJSPrefacingCols","nonJSPrefacingLines","string","addSourceInfo","src","file","number","codeStartLine","codeStartCol","targetSource","getFilenameInfo","includes","replace","filenameInfo","forEachPreferredTag","description","trim","getTagDescription","tagName","getPreferredTagName","hasTag","matchingFilenameInfo","column","severity","message","ruleId","test","startingIndex","lastStringCount","exampleCode","lastIndex","exec","index","n0","n1","preMatch","preMatchLines","nonJSPreface","nonJSPrefaceLineCount","idx","indexOf","charsInLastLine","global","meta","name","processors","examples","preprocess","ast","parseForESLint","ecmaVersion","comment","err","jsdocComments","comments","filter","value","map","start","range","textToStart","parseComment","flatMap","Boolean","console","log","postprocess","jsMessages","messages","forEach","msg","fatal","endColumn","endLine","codeCtxLine","codeCtxColumn","startLine","startCol","ret","concat","supportsAutofix","exports"],"sources":["../src/getJsdocProcessorPlugin.js"],"sourcesContent":["// Todo: Support TS by fenced block type\n\nimport {readFileSync} from 'node:fs';\nimport { dirname, join } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport * as espree from 'espree';\nimport {\n  getRegexFromString,\n  forEachPreferredTag,\n  getTagDescription,\n  getPreferredTagName,\n  hasTag,\n} from './jsdocUtils.js';\nimport {\n  parseComment,\n} from '@es-joy/jsdoccomment';\n\nconst __dirname = dirname(fileURLToPath(import.meta.url));\n\nconst {version} = JSON.parse(\n  // @ts-expect-error `Buffer` is ok for `JSON.parse`\n  readFileSync(join(__dirname, '../package.json'))\n);\n\n// const zeroBasedLineIndexAdjust = -1;\nconst likelyNestedJSDocIndentSpace = 1;\nconst preTagSpaceLength = 1;\n\n// If a space is present, we should ignore it\nconst firstLinePrefixLength = preTagSpaceLength;\n\nconst hasCaptionRegex = /^\\s*<caption>([\\s\\S]*?)<\\/caption>/u;\n\n/**\n * @param {string} str\n * @returns {string}\n */\nconst escapeStringRegexp = (str) => {\n  return str.replaceAll(/[.*+?^${}()|[\\]\\\\]/gu, '\\\\$&');\n};\n\n/**\n * @param {string} str\n * @param {string} ch\n * @returns {import('./iterateJsdoc.js').Integer}\n */\nconst countChars = (str, ch) => {\n  return (str.match(new RegExp(escapeStringRegexp(ch), 'gu')) || []).length;\n};\n\n/**\n * @param {string} text\n * @returns {[\n*   import('./iterateJsdoc.js').Integer,\n*   import('./iterateJsdoc.js').Integer\n* ]}\n*/\nconst getLinesCols = (text) => {\n const matchLines = countChars(text, '\\n');\n\n const colDelta = matchLines ?\n   text.slice(text.lastIndexOf('\\n') + 1).length :\n   text.length;\n\n return [\n   matchLines, colDelta,\n ];\n};\n\n/**\n * @typedef {number} Integer\n */\n\n/**\n * @typedef {object} JsdocProcessorOptions\n * @property {boolean} [captionRequired]\n * @property {Integer} [paddedIndent]\n * @property {boolean} [checkDefaults]\n * @property {boolean} [checkParams]\n * @property {boolean} [checkExamples]\n * @property {boolean} [checkProperties]\n * @property {string} [matchingFileName]\n * @property {string} [matchingFileNameDefaults]\n * @property {string} [matchingFileNameParams]\n * @property {string} [matchingFileNameProperties]\n * @property {string} [exampleCodeRegex]\n * @property {string} [rejectExampleCodeRegex]\n * @property {\"script\"|\"module\"} [sourceType]\n * @property {import('eslint').Linter.ESTreeParser|import('eslint').Linter.NonESTreeParser} [parser]\n */\n\n/**\n * We use a function for the ability of the user to pass in a config, but\n * without requiring all users of the plugin to do so.\n * @param {JsdocProcessorOptions} [options]\n */\nexport const getJsdocProcessorPlugin = (options = {}) => {\n  const {\n    exampleCodeRegex = null,\n    rejectExampleCodeRegex = null,\n    checkExamples = true,\n    checkDefaults = false,\n    checkParams = false,\n    checkProperties = false,\n    matchingFileName = null,\n    matchingFileNameDefaults = null,\n    matchingFileNameParams = null,\n    matchingFileNameProperties = null,\n    paddedIndent = 0,\n    captionRequired = false,\n    sourceType = 'module',\n    parser = undefined\n  } = options;\n\n  /** @type {RegExp} */\n  let exampleCodeRegExp;\n  /** @type {RegExp} */\n  let rejectExampleCodeRegExp;\n\n  if (exampleCodeRegex) {\n    exampleCodeRegExp = getRegexFromString(exampleCodeRegex);\n  }\n\n  if (rejectExampleCodeRegex) {\n    rejectExampleCodeRegExp = getRegexFromString(rejectExampleCodeRegex);\n  }\n\n  /**\n   * @type {{\n   *   targetTagName: string,\n   *   ext: string,\n   *   codeStartLine: number,\n   *   codeStartCol: number,\n   *   nonJSPrefacingCols: number,\n   *   commentLineCols: [number, number]\n   * }[]}\n   */\n  const otherInfo = [];\n\n  /** @type {import('eslint').Linter.LintMessage[]} */\n  let extraMessages = [];\n\n  /**\n   * @param {import('./iterateJsdoc.js').JsdocBlockWithInline} jsdoc\n   * @param {string} jsFileName\n   * @param {[number, number]} commentLineCols\n   */\n  const getTextsAndFileNames = (jsdoc, jsFileName, commentLineCols) => {\n    /**\n     * @type {{\n     *   text: string,\n     *   filename: string|null|undefined\n     * }[]}\n     */\n    const textsAndFileNames = [];\n\n    /**\n     * @param {{\n     *   filename: string|null,\n     *   defaultFileName: string|undefined,\n     *   source: string,\n     *   targetTagName: string,\n     *   rules?: import('eslint').Linter.RulesRecord|undefined,\n     *   lines?: import('./iterateJsdoc.js').Integer,\n     *   cols?: import('./iterateJsdoc.js').Integer,\n     *   skipInit?: boolean,\n     *   ext: string,\n     *   sources?: {\n     *     nonJSPrefacingCols: import('./iterateJsdoc.js').Integer,\n     *     nonJSPrefacingLines: import('./iterateJsdoc.js').Integer,\n     *     string: string,\n     *   }[],\n     *   tag?: import('comment-parser').Spec & {\n     *     line?: import('./iterateJsdoc.js').Integer,\n     *   }|{\n     *     line: import('./iterateJsdoc.js').Integer,\n     *   }\n     * }} cfg\n     */\n    const checkSource = ({\n      filename,\n      ext,\n      defaultFileName,\n      lines = 0,\n      cols = 0,\n      skipInit,\n      source,\n      targetTagName,\n      sources = [],\n      tag = {\n        line: 0,\n      },\n    }) => {\n      if (!skipInit) {\n        sources.push({\n          nonJSPrefacingCols: cols,\n          nonJSPrefacingLines: lines,\n          string: source,\n        });\n      }\n\n      /**\n       * @param {{\n       *   nonJSPrefacingCols: import('./iterateJsdoc.js').Integer,\n       *   nonJSPrefacingLines: import('./iterateJsdoc.js').Integer,\n       *   string: string\n       * }} cfg\n       */\n      const addSourceInfo = function ({\n        nonJSPrefacingCols,\n        nonJSPrefacingLines,\n        string,\n      }) {\n        const src = paddedIndent ?\n          string.replaceAll(new RegExp(`(^|\\n) {${paddedIndent}}(?!$)`, 'gu'), '\\n') :\n          string;\n\n        // Programmatic ESLint API: https://eslint.org/docs/developer-guide/nodejs-api\n        const file = filename || defaultFileName;\n\n        if (!('line' in tag)) {\n          tag.line = tag.source[0].number;\n        }\n\n        // NOTE: `tag.line` can be 0 if of form `/** @tag ... */`\n        const codeStartLine = /**\n                               * @type {import('comment-parser').Spec & {\n                               *     line: import('./iterateJsdoc.js').Integer,\n                               * }}\n                               */ (tag).line + nonJSPrefacingLines;\n        const codeStartCol = likelyNestedJSDocIndentSpace;\n\n        textsAndFileNames.push({\n          text: src,\n          filename: file,\n        });\n        otherInfo.push({\n          targetTagName,\n          ext,\n          codeStartLine,\n          codeStartCol,\n          nonJSPrefacingCols,\n          commentLineCols\n        });\n      };\n\n      for (const targetSource of sources) {\n        addSourceInfo(targetSource);\n      }\n    };\n\n    /**\n     *\n     * @param {string|null} filename\n     * @param {string} [ext] Since `eslint-plugin-markdown` v2, and\n     *   ESLint 7, this is the default which other JS-fenced rules will used.\n     *   Formerly \"md\" was the default.\n     * @returns {{\n     *   defaultFileName: string|undefined,\n     *   filename: string|null,\n     *   ext: string\n     * }}\n     */\n    const getFilenameInfo = (filename, ext = 'md/*.js') => {\n      let defaultFileName;\n      if (!filename) {\n        if (typeof jsFileName === 'string' && jsFileName.includes('.')) {\n          defaultFileName = jsFileName.replace(/\\.[^.]*$/u, `.${ext}`);\n        } else {\n          defaultFileName = `dummy.${ext}`;\n        }\n      }\n\n      return {\n        ext,\n        defaultFileName,\n        filename,\n      };\n    };\n\n    if (checkDefaults) {\n      const filenameInfo = getFilenameInfo(matchingFileNameDefaults, 'jsdoc-defaults');\n      forEachPreferredTag(jsdoc, 'default', (tag, targetTagName) => {\n        if (!tag.description.trim()) {\n          return;\n        }\n\n        checkSource({\n          source: `(${getTagDescription(tag)})`,\n          targetTagName,\n          ...filenameInfo,\n        });\n      });\n    }\n\n    if (checkParams) {\n      const filenameInfo = getFilenameInfo(matchingFileNameParams, 'jsdoc-params');\n      forEachPreferredTag(jsdoc, 'param', (tag, targetTagName) => {\n        if (!tag.default || !tag.default.trim()) {\n          return;\n        }\n\n        checkSource({\n          source: `(${tag.default})`,\n          targetTagName,\n          ...filenameInfo,\n        });\n      });\n    }\n\n    if (checkProperties) {\n      const filenameInfo = getFilenameInfo(matchingFileNameProperties, 'jsdoc-properties');\n      forEachPreferredTag(jsdoc, 'property', (tag, targetTagName) => {\n        if (!tag.default || !tag.default.trim()) {\n          return;\n        }\n\n        checkSource({\n          source: `(${tag.default})`,\n          targetTagName,\n          ...filenameInfo,\n        });\n      });\n    }\n\n    if (!checkExamples) {\n      return textsAndFileNames;\n    }\n\n    const tagName = /** @type {string} */ (getPreferredTagName(jsdoc, {\n      tagName: 'example',\n    }));\n    if (!hasTag(jsdoc, tagName)) {\n      return textsAndFileNames;\n    }\n\n    const matchingFilenameInfo = getFilenameInfo(matchingFileName);\n\n    forEachPreferredTag(jsdoc, 'example', (tag, targetTagName) => {\n      let source = /** @type {string} */ (getTagDescription(tag));\n      const match = source.match(hasCaptionRegex);\n\n      if (captionRequired && (!match || !match[1].trim())) {\n        extraMessages.push({\n          line: 1 + commentLineCols[0] + (tag.line ?? tag.source[0].number),\n          column: commentLineCols[1] + 1,\n          severity: 2,\n          message: `@${targetTagName} error - Caption is expected for examples.`,\n          ruleId: 'jsdoc/example-missing-caption'\n        });\n        return;\n      }\n\n      source = source.replace(hasCaptionRegex, '');\n      const [\n        lines,\n        cols,\n      ] = match ? getLinesCols(match[0]) : [\n        0, 0,\n      ];\n\n      if (exampleCodeRegex && !exampleCodeRegExp.test(source) ||\n        rejectExampleCodeRegex && rejectExampleCodeRegExp.test(source)\n      ) {\n        return;\n      }\n\n      const sources = [];\n      let skipInit = false;\n      if (exampleCodeRegex) {\n        let nonJSPrefacingCols = 0;\n        let nonJSPrefacingLines = 0;\n\n        let startingIndex = 0;\n        let lastStringCount = 0;\n\n        let exampleCode;\n        exampleCodeRegExp.lastIndex = 0;\n        while ((exampleCode = exampleCodeRegExp.exec(source)) !== null) {\n          const {\n            index,\n            '0': n0,\n            '1': n1,\n          } = exampleCode;\n\n          // Count anything preceding user regex match (can affect line numbering)\n          const preMatch = source.slice(startingIndex, index);\n\n          const [\n            preMatchLines,\n            colDelta,\n          ] = getLinesCols(preMatch);\n\n          let nonJSPreface;\n          let nonJSPrefaceLineCount;\n          if (n1) {\n            const idx = n0.indexOf(n1);\n            nonJSPreface = n0.slice(0, idx);\n            nonJSPrefaceLineCount = countChars(nonJSPreface, '\\n');\n          } else {\n            nonJSPreface = '';\n            nonJSPrefaceLineCount = 0;\n          }\n\n          nonJSPrefacingLines += lastStringCount + preMatchLines + nonJSPrefaceLineCount;\n\n          // Ignore `preMatch` delta if newlines here\n          if (nonJSPrefaceLineCount) {\n            const charsInLastLine = nonJSPreface.slice(nonJSPreface.lastIndexOf('\\n') + 1).length;\n\n            nonJSPrefacingCols += charsInLastLine;\n          } else {\n            nonJSPrefacingCols += colDelta + nonJSPreface.length;\n          }\n\n          const string = n1 || n0;\n          sources.push({\n            nonJSPrefacingCols,\n            nonJSPrefacingLines,\n            string,\n          });\n          startingIndex = exampleCodeRegExp.lastIndex;\n          lastStringCount = countChars(string, '\\n');\n          if (!exampleCodeRegExp.global) {\n            break;\n          }\n        }\n\n        skipInit = true;\n      }\n\n      checkSource({\n        cols,\n        lines,\n        skipInit,\n        source,\n        sources,\n        tag,\n        targetTagName,\n        ...matchingFilenameInfo,\n      });\n    });\n\n    return textsAndFileNames;\n  };\n\n  // See https://eslint.org/docs/latest/extend/plugins#processors-in-plugins\n  // See https://eslint.org/docs/latest/extend/custom-processors\n  // From https://github.com/eslint/eslint/issues/14745#issuecomment-869457265\n  /*\n    {\n      \"files\": [\"*.js\", \"*.ts\"],\n      \"processor\": \"jsdoc/example\" // a pretended value here\n    },\n    {\n      \"files\": [\n        \"*.js/*_jsdoc-example.js\",\n        \"*.ts/*_jsdoc-example.js\",\n        \"*.js/*_jsdoc-example.ts\"\n      ],\n      \"rules\": {\n        // specific rules for examples in jsdoc only here\n        // And other rules for `.js` and `.ts` will also be enabled for them\n      }\n    }\n  */\n  return {\n    meta: {\n      name: 'eslint-plugin-jsdoc/processor',\n      version,\n    },\n    processors: {\n      examples: {\n        meta: {\n          name: 'eslint-plugin-jsdoc/preprocessor',\n          version,\n        },\n        /**\n         * @param {string} text\n         * @param {string} filename\n         */\n        preprocess (text, filename) {\n          try {\n            let ast;\n\n            // May be running a second time so catch and ignore\n            try {\n              ast = parser\n                // @ts-expect-error Should be present\n                ? parser.parseForESLint(text, {\n                  ecmaVersion: 'latest',\n                  sourceType,\n                  comment: true\n                }).ast\n                : espree.parse(text, {\n                  ecmaVersion: 'latest',\n                  sourceType,\n                  comment: true\n                });\n            } catch (err) {\n              return [text];\n            }\n\n            /** @type {[number, number][]} */\n            const commentLineCols = [];\n            const jsdocComments = /** @type {import('estree').Comment[]} */ (\n              /**\n               * @type {import('estree').Program & {\n               *   comments?: import('estree').Comment[]\n               * }}\n               */\n              (ast).comments\n            ).filter((comment) => {\n              return (/^\\*\\s/u).test(comment.value);\n            }).map((comment) => {\n              /* c8 ignore next -- Unsupporting processors only? */\n              const [start] = comment.range ?? [];\n              const textToStart = text.slice(0, start);\n\n              const [lines, cols] = getLinesCols(textToStart);\n\n              // const lines = [...textToStart.matchAll(/\\n/gu)].length\n              // const lastLinePos = textToStart.lastIndexOf('\\n');\n              // const cols = lastLinePos === -1\n              //   ? 0\n              //   : textToStart.slice(lastLinePos).length;\n              commentLineCols.push([lines, cols]);\n              return parseComment(comment);\n            });\n\n            return [\n              text,\n              ...jsdocComments.flatMap((jsdoc, idx) => {\n                return getTextsAndFileNames(\n                  jsdoc,\n                  filename,\n                  commentLineCols[idx]\n                );\n              }).filter(Boolean)\n            ];\n          /* c8 ignore next 3 */\n          } catch (err) {\n            console.log('err', filename, err);\n          }\n        },\n\n        /**\n         * @param {import('eslint').Linter.LintMessage[][]} messages\n         * @param {string} filename\n         */\n        postprocess ([jsMessages, ...messages], filename) {\n          messages.forEach((message, idx) => {\n            const {\n              targetTagName,\n              codeStartLine,\n              codeStartCol,\n              nonJSPrefacingCols,\n              commentLineCols\n            } = otherInfo[idx];\n\n            message.forEach((msg) => {\n              const {\n                message,\n                ruleId,\n                severity,\n                fatal,\n                line,\n                column,\n                endColumn,\n                endLine,\n\n                // Todo: Make fixable\n                // fix\n                // fix: {range: [number, number], text: string}\n                // suggestions: {desc: , messageId:, fix: }[],\n              } = msg;\n\n              const [codeCtxLine, codeCtxColumn] = commentLineCols;\n              const startLine = codeCtxLine + codeStartLine + line;\n              const startCol = 1 + // Seems to need one more now\n                codeCtxColumn + codeStartCol + (\n                  // This might not work for line 0, but line 0 is unlikely for examples\n                  line <= 1 ? nonJSPrefacingCols + firstLinePrefixLength : preTagSpaceLength\n                ) + column;\n\n              msg.message = '@' + targetTagName + ' ' + (severity === 2 ? 'error' : 'warning') +\n                (ruleId ? ' (' + ruleId + ')' : '') + ': ' +\n                (fatal ? 'Fatal: ' : '') +\n                message;\n              msg.line = startLine;\n              msg.column = startCol;\n              msg.endLine = endLine ? startLine + endLine : startLine;\n              // added `- column` to offset what `endColumn` already seemed to include\n              msg.endColumn = endColumn ? startCol - column + endColumn : startCol;\n            });\n          });\n\n          const ret = [...jsMessages].concat(...messages, ...extraMessages);\n          extraMessages = [];\n          return ret;\n        },\n        supportsAutofix: true\n      },\n    },\n  };\n};\n"],"mappings":"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","ignoreList":[]}