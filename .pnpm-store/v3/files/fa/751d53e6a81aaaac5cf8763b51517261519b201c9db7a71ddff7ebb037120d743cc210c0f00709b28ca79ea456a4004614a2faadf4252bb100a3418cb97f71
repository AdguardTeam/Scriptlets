/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var baseDeserializer = require('../base-deserializer.js');
var index = require('../../nodes/index.js');
var constants = require('../../utils/constants.js');
var listItemCommon = require('../../marshalling-utils/misc/list-item-common.js');
var binaryTypeCommon = require('../../marshalling-utils/misc/binary-type-common.js');

/* eslint-disable no-param-reassign */
class ListItemDeserializer extends baseDeserializer.BaseDeserializer {
    /**
     * Deserializes a list item from binary format.
     *
     * @param buffer Input byte buffer.
     * @param node Partial list item to deserialize.
     * @template T Type of the list item.
     */
    static deserialize = (buffer, node) => {
        const type = buffer.readUint8();
        switch (type) {
            case binaryTypeCommon.BinaryTypeMarshallingMap.AppNode:
                node.type = index.ListItemNodeType.App;
                break;
            case binaryTypeCommon.BinaryTypeMarshallingMap.DomainNode:
                node.type = index.ListItemNodeType.Domain;
                break;
            case binaryTypeCommon.BinaryTypeMarshallingMap.MethodNode:
                node.type = index.ListItemNodeType.Method;
                break;
            case binaryTypeCommon.BinaryTypeMarshallingMap.StealthOptionNode:
                node.type = index.ListItemNodeType.StealthOption;
                break;
            default:
                throw new Error(`Invalid list item type: ${type}`);
        }
        let prop = buffer.readUint8();
        while (prop !== constants.NULL) {
            switch (prop) {
                case listItemCommon.ListItemMarshallingMap.Exception:
                    node.exception = buffer.readUint8() === 1;
                    break;
                case listItemCommon.ListItemMarshallingMap.Value:
                    node.value = buffer.readString();
                    break;
                case listItemCommon.ListItemMarshallingMap.Start:
                    node.start = buffer.readUint32();
                    break;
                case listItemCommon.ListItemMarshallingMap.End:
                    node.end = buffer.readUint32();
                    break;
                default:
                    throw new Error(`Invalid property: ${type}`);
            }
            prop = buffer.readUint8();
        }
    };
}

exports.ListItemDeserializer = ListItemDeserializer;
