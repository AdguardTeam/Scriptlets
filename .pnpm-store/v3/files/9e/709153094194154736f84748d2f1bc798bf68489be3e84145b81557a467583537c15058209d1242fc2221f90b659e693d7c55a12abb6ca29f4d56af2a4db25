/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var constants = require('../../utils/constants.js');
var typeGuards = require('../../utils/type-guards.js');
var baseSerializer = require('../base-serializer.js');
var valueCommon = require('../../marshalling-utils/misc/value-common.js');
var binaryTypeCommon = require('../../marshalling-utils/misc/binary-type-common.js');

/**
 * Value serializer.
 */
class ValueSerializer extends baseSerializer.BaseSerializer {
    /**
     * Serializes a value node to binary format.
     *
     * @param node Node to serialize.
     * @param buffer ByteBuffer for writing binary data.
     * @param frequentValuesMap Optional map of frequent values.
     * @param toLower Whether to lowercase the value before the frequent value match (defaults to `false`).
     */
    static serialize(node, buffer, frequentValuesMap, toLower = false) {
        buffer.writeUint8(binaryTypeCommon.BinaryTypeMarshallingMap.ValueNode);
        const frequentValue = frequentValuesMap?.get(toLower ? node.value.toLowerCase() : node.value);
        // note: do not use just `if (frequentValue)` because it can be 0
        if (!typeGuards.isUndefined(frequentValue)) {
            buffer.writeUint8(valueCommon.ValueNodeMarshallingMap.FrequentValue);
            buffer.writeUint8(frequentValue);
        }
        else {
            buffer.writeUint8(valueCommon.ValueNodeMarshallingMap.Value);
            buffer.writeString(node.value);
        }
        // note: do not use just `if (node.start)` because it can be 0
        if (!typeGuards.isUndefined(node.start)) {
            buffer.writeUint8(valueCommon.ValueNodeMarshallingMap.Start);
            buffer.writeUint32(node.start);
        }
        if (!typeGuards.isUndefined(node.end)) {
            buffer.writeUint8(valueCommon.ValueNodeMarshallingMap.End);
            buffer.writeUint32(node.end);
        }
        buffer.writeUint8(constants.NULL);
    }
}

exports.ValueSerializer = ValueSerializer;
