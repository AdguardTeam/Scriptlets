/*
 * AGTree v3.0.0-alpha.1 (build date: Tue, 12 Nov 2024 16:11:58 GMT)
 * (c) 2024 Adguard Software Ltd.
 * Released under the MIT license
 * https://github.com/AdguardTeam/tsurlfilter/tree/master/packages/agtree#readme
 */
'use strict';

var typeGuards = require('../../utils/type-guards.js');
var modifiers = require('../modifiers.js');
var resourceType = require('../schemas/resource-type.js');

/**
 * Map of resource types to their corresponding adblock modifier names.
 *
 * @note Record type is used to ensure that all resource types are present in the map.
 */
const RESOURCE_TYPE_MODIFIER_MAP = Object.freeze({
    [resourceType.ResourceType.MainFrame]: 'document',
    [resourceType.ResourceType.SubFrame]: 'subdocument',
    [resourceType.ResourceType.Stylesheet]: 'stylesheet',
    [resourceType.ResourceType.Script]: 'script',
    [resourceType.ResourceType.Image]: 'image',
    [resourceType.ResourceType.Font]: 'font',
    [resourceType.ResourceType.Object]: 'object',
    [resourceType.ResourceType.XmlHttpRequest]: 'xmlhttprequest',
    [resourceType.ResourceType.Ping]: 'ping',
    [resourceType.ResourceType.Media]: 'media',
    [resourceType.ResourceType.WebSocket]: 'websocket',
    [resourceType.ResourceType.Other]: 'other',
});
/**
 * Gets the adblock modifier name for the given resource type.
 *
 * @param resourceType Resource type to get the modifier name for.
 * @param platform Platform to get the modifier for.
 *
 * @returns A string containing the adblock modifier name for the given resource type
 * or `null` if the modifier could not be found.
 */
const getResourceTypeModifier = (resourceType, platform) => {
    const modifierName = RESOURCE_TYPE_MODIFIER_MAP[resourceType];
    if (!modifierName) {
        return null;
    }
    const modifierData = modifiers.modifiersCompatibilityTable.getFirst(modifierName, platform);
    if (typeGuards.isNull(modifierData)) {
        return null;
    }
    return modifierData.name;
};
/**
 * Checks if the given resource type is valid.
 *
 * @param resourceType Resource type to check.
 *
 * @returns `true` if the resource type is valid, `false` otherwise.
 */
const isValidResourceType = (resourceType$1) => {
    return Object.values(resourceType.ResourceType).includes(resourceType$1);
};

exports.getResourceTypeModifier = getResourceTypeModifier;
exports.isValidResourceType = isValidResourceType;
